<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BaoMen.Framework</name>
    </assembly>
    <members>
        <member name="T:BaoMen.Framework.System.BusinessLogic.CityManager">
            <summary>
            地市信息业务逻辑
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.CityManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
            <param name="serviceProvider">服务提供程序</param>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.CityManager.DoInsert(BaoMen.Framework.System.Entity.City)">
            <summary>
            插入数据
            </summary>
            <param name="item">系统角色实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.CityManager.DoUpdate(BaoMen.Framework.System.Entity.City)">
            <summary>
            更新数据
            </summary>
            <param name="item">系统角色实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.CityManager.DoDelete(BaoMen.Framework.System.Entity.City)">
            <summary>
            删除数据
            </summary>
            <param name="item">系统角色实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.CityManager.GetName(System.String)">
            <summary>
            根据ID取得名称
            </summary>
            <param name="key">ID</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.CityManager.GetKey(System.String)">
            <summary>
            根据名称查找ID
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.DistrictManager">
            <summary>
            地区信息业务逻辑
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.DistrictManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration,BaoMen.Framework.System.BusinessLogic.IOperateHistoryManager)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
            <param name="operateHistoryManager">操作日志业务逻辑</param>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.DistrictManager.DoInsert(BaoMen.Framework.System.Entity.District)">
            <summary>
            插入数据
            </summary>
            <param name="item">系统角色实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.DistrictManager.DoUpdate(BaoMen.Framework.System.Entity.District)">
            <summary>
            更新数据
            </summary>
            <param name="item">系统角色实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.DistrictManager.DoDelete(BaoMen.Framework.System.Entity.District)">
            <summary>
            删除数据
            </summary>
            <param name="item">系统角色实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.DistrictManager.GetName(System.String)">
            <summary>
            根据ID取得名称
            </summary>
            <param name="key">ID</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.DistrictManager.GetKey(System.String)">
            <summary>
            根据名称查找ID
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.DownloadFileManager">
            <summary>
            系统下载文件业务逻辑
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.DownloadFileManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.ICityManager">
            <summary>
            地市信息业务逻辑接口
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.IDistrictManager">
            <summary>
            地区信息业务逻辑接口
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.IDownloadFileManager">
            <summary>
            系统下载文件业务逻辑接口
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.IModuleManager">
            <summary>
            系统模块业务逻辑接口
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.IOperateHistoryManager">
            <summary>
            系统操作日志业务逻辑接口
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IOperateHistoryManager.Insert``1(System.String,``0,BaoMen.Common.Constant.DataOperationType,BaoMen.Framework.Util.IUser,System.String,System.Data.IDbTransaction)">
            <summary>
            插入操作历史
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="relatedId">相关ID</param>
            <param name="value">实体实例</param>
            <param name="dataOperationType">操作类型</param>
            <param name="user">操作人,为空时代表当前操作人</param>
            <param name="description">描述信息（可空）</param>
            <param name="transaction">数据库事务</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.IParameterManager">
            <summary>
            系统参数业务逻辑接口
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IParameterManager.Get(System.String,System.String)">
            <summary>
            获取系统参数
            </summary>
            <param name="parentId">父ID</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IParameterManager.CreateId(System.String)">
            <summary>
            创建新的ID
            </summary>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.IProvinceManager">
            <summary>
            省份信息业务逻辑接口
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.IRoleManager">
            <summary>
            系统角色业务逻辑接口
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.IUploadFileManager">
            <summary>
            系统上传文件业务逻辑接口
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IUploadFileManager.GetRelativePath">
            <summary>
            获取上传文件相对路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IUploadFileManager.GetUploadPath">
            <summary>
            获取上传文件的目录路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IUploadFileManager.CreateUploadFile(System.String,System.String,System.Int32,System.String)">
            <summary>
            创建上传文件实例
            </summary>
            <param name="createUserId">创建人</param>
            <param name="relatedId">关联ID</param>
            <param name="type">类型</param>
            <param name="originalFileName">原始文件名</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IUploadFileManager.SaveFile(System.String,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            保存上传文件
            </summary>
            <param name="path">文件物理路径</param>
            <param name="file">文件流</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IUploadFileManager.GetPhysicalPath(System.String)">
            <summary>
            根据相对路径获取绝对路径
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IUploadFileManager.Insert(BaoMen.Framework.System.Entity.UploadFile,System.Data.IDbTransaction)">
            <summary>
            插入上传文件实例
            </summary>
            <param name="item">上传文件实例</param>
            <param name="transaction">数据库事务</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.IUserLoginHistoryManager">
            <summary>
            系统用户登录历史业务逻辑接口
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.IUserManager">
            <summary>
            系统用户业务逻辑接口
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IUserManager.GetUserToken(System.String)">
            <summary>
            获取用户令牌
            </summary>
            <param name="token">令牌</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IUserManager.UpdateUserToken(BaoMen.Framework.System.Entity.UserToken)">
            <summary>
            更新用户令牌
            </summary>
            <param name="item">用户令牌实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IUserManager.ModifyPassword(BaoMen.Framework.System.Entity.User,System.String)">
            <summary>
            修改密码
            </summary>
            <param name="item">用户实体</param>
            <param name="newPassword">新密码</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IUserManager.ResetPassword(BaoMen.Framework.System.Entity.User)">
            <summary>
            重置密码
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IUserManager.ExpireToken(System.String)">
            <summary>
            过期Token
            </summary>
            <param name="userId">用户ID</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IUserManager.UpdateAvatar(BaoMen.Framework.System.Entity.User,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            修改头像
            </summary>
            <param name="item">用户实例</param>
            <param name="file">文件流</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.IUserManager.ModifyPersonalSetting(BaoMen.Framework.System.Entity.User)">
            <summary>
            用户修改个人设置
            </summary>
            <param name="item">用户实体</param>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.ModuleManager">
            <summary>
            系统模块业务逻辑
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ModuleManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
            <param name="serviceProvider">服务提供程序</param>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ModuleManager.DoInsert(BaoMen.Framework.System.Entity.Module)">
            <summary>
            插入系统模块
            </summary>
            <param name="item">模块实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ModuleManager.DoUpdate(BaoMen.Framework.System.Entity.Module)">
            <summary>
            更新系统模块
            </summary>
            <param name="item">模块实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ModuleManager.DoDelete(BaoMen.Framework.System.Entity.Module)">
            <summary>
            删除系统模块
            </summary>
            <param name="item">模块实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ModuleManager.RemoveCache">
            <summary>
            移除缓存
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.OperateHistoryManager">
            <summary>
            系统操作日志业务逻辑
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.OperateHistoryManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
            <param name="serviceProvider">服务提供程序</param>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.OperateHistoryManager.Insert``1(System.String,``0,BaoMen.Common.Constant.DataOperationType,BaoMen.Framework.Util.IUser,System.String,System.Data.IDbTransaction)">
            <summary>
            插入操作历史
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="relatedId">相关ID</param>
            <param name="value">实体实例</param>
            <param name="dataOperationType">操作类型</param>
            <param name="user">操作人,为空时代表当前操作人</param>
            <param name="description">描述信息（可空）</param>
            <param name="transaction">数据库事务</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.ParameterManager">
            <summary>
            系统参数业务逻辑
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ParameterManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration,BaoMen.Framework.System.BusinessLogic.IOperateHistoryManager)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
            <param name="operateHistoryManager">操作日志业务逻辑</param>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ParameterManager.DoInsert(BaoMen.Framework.System.Entity.Parameter)">
            <summary>
            插入系统参数
            </summary>
            <param name="item">实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ParameterManager.DoUpdate(BaoMen.Framework.System.Entity.Parameter)">
            <summary>
            更新系统参数
            </summary>
            <param name="item">实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ParameterManager.DoDelete(BaoMen.Framework.System.Entity.Parameter)">
            <summary>
            删除系统参数
            </summary>
            <param name="item">实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ParameterManager.Get(System.String,System.String)">
            <summary>
            获取系统参数
            </summary>
            <param name="parentId">父ID</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ParameterManager.CreateId(System.String)">
            <summary>
            创建新的ID
            </summary>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.ProvinceManager">
            <summary>
            省份信息业务逻辑
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ProvinceManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
            <param name="serviceProvider">服务提供程序</param>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ProvinceManager.DoInsert(BaoMen.Framework.System.Entity.Province)">
            <summary>
            插入数据
            </summary>
            <param name="item">系统角色实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ProvinceManager.DoUpdate(BaoMen.Framework.System.Entity.Province)">
            <summary>
            更新数据
            </summary>
            <param name="item">系统角色实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ProvinceManager.DoDelete(BaoMen.Framework.System.Entity.Province)">
            <summary>
            删除数据
            </summary>
            <param name="item">系统角色实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ProvinceManager.GetName(System.String)">
            <summary>
            根据ID取得名称
            </summary>
            <param name="key">ID</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.ProvinceManager.GetKey(System.String)">
            <summary>
            根据名称查找ID
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.RoleManager">
            <summary>
            系统角色业务逻辑
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.RoleManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
            <param name="serviceProvider">数据提供程序</param>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.RoleManager.DoInsert(BaoMen.Framework.System.Entity.Role)">
            <summary>
            插入数据
            </summary>
            <param name="item">系统角色实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.RoleManager.DoDelete(BaoMen.Framework.System.Entity.Role)">
            <summary>
            删除数据
            </summary>
            <param name="item">系统角色实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.RoleManager.DoUpdate(BaoMen.Framework.System.Entity.Role)">
            <summary>
            更新数据
            </summary>
            <param name="item">系统角色实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.RoleManager.AppendExtention(BaoMen.Framework.System.Entity.Role)">
            <summary>
            添加扩展属性
            </summary>
            <param name="item">系统角色实体</param>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.RoleManager.RemoveCache">
            <summary>
            移除缓存
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.RoleModuleManager">
            <summary>
            角色模块业务逻辑
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.RoleModuleManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
        </member>
        <member name="P:BaoMen.Framework.System.BusinessLogic.RoleModuleManager.IdentityPropertyName">
            <summary>
            获取实体标识字段名称
            </summary>
            <remarks>
            <para>默认标识字段不为Id。覆盖此属性</para>
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.BusinessLogic.RoleModuleManager.Dal">
            <summary>
            角色模块数据访问实例
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.UploadFileManager">
            <summary>
            系统上传文件业务逻辑
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UploadFileManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
            <param name="serviceProvider">服务提供程序</param>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UploadFileManager.DoInsert(BaoMen.Framework.System.Entity.UploadFile)">
            <summary>
            重写基类的方法
            </summary>
            <param name="item">实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UploadFileManager.GetUploadPath">
            <summary>
            获取上传文件的目录路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UploadFileManager.GetRelativePath">
            <summary>
            获取上传文件相对路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UploadFileManager.GetPhysicalPath(System.String)">
            <summary>
            根据相对路径获取绝对路径
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UploadFileManager.SaveFile(System.String,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            保存上传文件
            </summary>
            <param name="path">文件物理路径</param>
            <param name="file">文件流</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UploadFileManager.CreateUploadFile(System.String,System.String,System.Int32,System.String)">
            <summary>
            创建上传文件实例
            </summary>
            <param name="createUserId">创建人</param>
            <param name="relatedId">关联ID</param>
            <param name="type">类型</param>
            <param name="originalFileName">原始文件名</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UploadFileManager.Insert(BaoMen.Framework.System.Entity.UploadFile,System.Data.IDbTransaction)">
            <summary>
            插入上传文件实例
            </summary>
            <param name="item">上传文件实例</param>
            <param name="transaction">数据库事务</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.UserLoginHistoryManager">
            <summary>
            系统用户登录历史业务逻辑
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserLoginHistoryManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserLoginHistoryManager.DoInsert(BaoMen.Framework.System.Entity.UserLoginHistory)">
            <summary>
            插入登录历史
            </summary>
            <param name="item">登录历史实体</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.UserManager">
            <summary>
            系统用户业务逻辑
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
            <param name="serviceProvider">服务提供程序</param>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.DoInsert(BaoMen.Framework.System.Entity.User)">
            <summary>
            插入系统用户
            </summary>
            <param name="item">系统用户实体</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.DoUpdate(BaoMen.Framework.System.Entity.User)">
            <summary>
            更新系统用户
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.DoDelete(BaoMen.Framework.System.Entity.User)">
            <summary>
            删除系统用户
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.AppendExtention(BaoMen.Framework.System.Entity.User)">
            <summary>
            添加扩展属性
            </summary>
            <param name="item">系统用户实体</param>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.RemoveCache">
            <summary>
            移除缓存
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.GetUserToken(System.String)">
            <summary>
            获取用户令牌
            </summary>
            <param name="token">令牌</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.UpdateUserToken(BaoMen.Framework.System.Entity.UserToken)">
            <summary>
            更新用户令牌
            </summary>
            <param name="item">用户令牌实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.ModifyPassword(BaoMen.Framework.System.Entity.User,System.String)">
            <summary>
            修改密码
            </summary>
            <param name="item">用户实体</param>
            <param name="newPassword">新密码</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.ResetPassword(BaoMen.Framework.System.Entity.User)">
            <summary>
            重置密码
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.ExpireToken(System.String)">
            <summary>
            过期Token
            </summary>
            <param name="userId">用户ID</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.CreateDefaultPassword">
            <summary>
            生成默认随机密码
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.GetName(System.String)">
            <summary>
            根据ID取得名称
            </summary>
            <param name="key">ID</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.UpdateAvatar(BaoMen.Framework.System.Entity.User,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            修改头像
            </summary>
            <param name="item">用户实例</param>
            <param name="file">文件流</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserManager.ModifyPersonalSetting(BaoMen.Framework.System.Entity.User)">
            <summary>
            用户修改个人设置
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.UserRoleManager">
            <summary>
            用户角色业务逻辑
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserRoleManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
        </member>
        <member name="P:BaoMen.Framework.System.BusinessLogic.UserRoleManager.IdentityPropertyName">
            <summary>
            获取实体标识字段名称
            </summary>
            <remarks>
            <para>默认标识字段不为Id。覆盖此属性</para>
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.BusinessLogic.UserRoleManager.Dal">
            <summary>
            数据访问
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.BusinessLogic.UserTokenManager">
            <summary>
            系统用户令牌业务逻辑
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.BusinessLogic.UserTokenManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
        </member>
        <member name="P:BaoMen.Framework.System.BusinessLogic.UserTokenManager.IdentityPropertyName">
            <summary>
            获取实体标识字段名称
            </summary>
            <remarks>
            <para>默认标识字段不为Id。覆盖此属性</para>
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.BusinessLogic.UserTokenManager.Dal">
            <summary>
            内部使用的数据访问实体
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.DataAccess.City">
            <summary>
            地市信息数据访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.City.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="P:BaoMen.Framework.System.DataAccess.City.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.City.CreateInsertCommand(BaoMen.Framework.System.Entity.City)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns> 
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.City.CreateUpdateCommand(BaoMen.Framework.System.Entity.City)">
            <summary>
            取得更新数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.City.CreateDeleteCommand(BaoMen.Framework.System.Entity.City)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.City.CreateGetCommand(System.String)">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.City.CreateFilterSqlWhere(BaoMen.Framework.System.Entity.CityFilter)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="T:BaoMen.Framework.System.DataAccess.District">
            <summary>
            地区信息数据访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.District.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="P:BaoMen.Framework.System.DataAccess.District.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.District.CreateInsertCommand(BaoMen.Framework.System.Entity.District)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns> 
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.District.CreateUpdateCommand(BaoMen.Framework.System.Entity.District)">
            <summary>
            取得更新数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.District.CreateDeleteCommand(BaoMen.Framework.System.Entity.District)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.District.CreateGetCommand(System.String)">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.District.CreateFilterSqlWhere(BaoMen.Framework.System.Entity.DistrictFilter)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="T:BaoMen.Framework.System.DataAccess.DownloadFile">
            <summary>
            系统下载文件数据访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.DownloadFile.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="P:BaoMen.Framework.System.DataAccess.DownloadFile.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.DownloadFile.CreateInsertCommand(BaoMen.Framework.System.Entity.DownloadFile)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns> 
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.DownloadFile.CreateUpdateCommand(BaoMen.Framework.System.Entity.DownloadFile)">
            <summary>
            取得更新数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.DownloadFile.CreateDeleteCommand(BaoMen.Framework.System.Entity.DownloadFile)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.DownloadFile.CreateGetCommand(System.Int32)">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.DownloadFile.CreateFilterSqlWhere(BaoMen.Framework.System.Entity.DownloadFileFilter)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="T:BaoMen.Framework.System.DataAccess.Module">
            <summary>
            系统模块数据访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Module.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="P:BaoMen.Framework.System.DataAccess.Module.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Module.CreateUpdateCommand(BaoMen.Framework.System.Entity.Module)">
            <summary>
            取得更新数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Module.CreateDeleteCommand(BaoMen.Framework.System.Entity.Module)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Module.CreateGetCommand(System.String)">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Module.CreateFilterSqlWhere(BaoMen.Framework.System.Entity.ModuleFilter)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Module.CreateInsertCommand(BaoMen.Framework.System.Entity.Module)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns> 
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Module.UpdateNode(System.String,System.Int32,System.Data.IDbTransaction)">
            <summary>
            更新IsNode字段
            </summary>
            <param name="id">模块ID</param>
            <param name="isNode">IsNode字段的值</param>
            <param name="tranaction">数据库事物</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.DataAccess.OperateHistory">
            <summary>
            系统操作日志数据访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.OperateHistory.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="P:BaoMen.Framework.System.DataAccess.OperateHistory.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.OperateHistory.CreateInsertCommand(BaoMen.Framework.System.Entity.OperateHistory)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns> 
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.OperateHistory.CreateUpdateCommand(BaoMen.Framework.System.Entity.OperateHistory)">
            <summary>
            取得更新数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.OperateHistory.CreateDeleteCommand(BaoMen.Framework.System.Entity.OperateHistory)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.OperateHistory.CreateGetCommand(System.Int32)">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.OperateHistory.CreateFilterSqlWhere(BaoMen.Framework.System.Entity.OperateHistoryFilter)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="T:BaoMen.Framework.System.DataAccess.Parameter">
            <summary>
            系统参数数据访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Parameter.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="P:BaoMen.Framework.System.DataAccess.Parameter.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Parameter.CreateInsertCommand(BaoMen.Framework.System.Entity.Parameter)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns> 
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Parameter.CreateUpdateCommand(BaoMen.Framework.System.Entity.Parameter)">
            <summary>
            取得更新数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Parameter.CreateDeleteCommand(BaoMen.Framework.System.Entity.Parameter)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Parameter.CreateGetCommand(System.String)">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Parameter.CreateFilterSqlWhere(BaoMen.Framework.System.Entity.ParameterFilter)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Parameter.UpdateNode(System.String,System.Int32,System.Data.IDbTransaction)">
            <summary>
            更新节点信息
            </summary>
            <param name="id">ID</param>
            <param name="isNode">是否是节点</param>
            <param name="tranaction">数据库事务</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.DataAccess.Province">
            <summary>
            省份信息数据访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Province.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="P:BaoMen.Framework.System.DataAccess.Province.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Province.CreateInsertCommand(BaoMen.Framework.System.Entity.Province)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns> 
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Province.CreateUpdateCommand(BaoMen.Framework.System.Entity.Province)">
            <summary>
            取得更新数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Province.CreateDeleteCommand(BaoMen.Framework.System.Entity.Province)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Province.CreateGetCommand(System.String)">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Province.CreateFilterSqlWhere(BaoMen.Framework.System.Entity.ProvinceFilter)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="T:BaoMen.Framework.System.DataAccess.Role">
            <summary>
            系统角色数据访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Role.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="P:BaoMen.Framework.System.DataAccess.Role.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Role.CreateInsertCommand(BaoMen.Framework.System.Entity.Role)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns> 
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Role.CreateUpdateCommand(BaoMen.Framework.System.Entity.Role)">
            <summary>
            取得更新数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Role.CreateDeleteCommand(BaoMen.Framework.System.Entity.Role)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Role.CreateGetCommand(System.String)">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.Role.CreateFilterSqlWhere(BaoMen.Framework.System.Entity.RoleFilter)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="T:BaoMen.Framework.System.DataAccess.RoleModule">
            <summary>
            角色模块数据访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.RoleModule.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="P:BaoMen.Framework.System.DataAccess.RoleModule.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.RoleModule.CreateInsertCommand(BaoMen.Framework.System.Entity.RoleModule)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns> 
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.RoleModule.CreateUpdateCommand(BaoMen.Framework.System.Entity.RoleModule)">
            <summary>
            取得更新数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.RoleModule.CreateDeleteCommand(BaoMen.Framework.System.Entity.RoleModule)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.RoleModule.CreateGetCommand(System.Tuple{System.String,System.String})">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.RoleModule.CreateFilterSqlWhere(BaoMen.Framework.System.Entity.RoleModuleFilter)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.RoleModule.Insert(System.Collections.Generic.IList{BaoMen.Framework.System.Entity.RoleModule},System.Data.IDbTransaction)">
            <summary>
            批量插入
            </summary>
            <param name="roleModules"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.DataAccess.UploadFile">
            <summary>
            系统上传文件数据访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UploadFile.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="P:BaoMen.Framework.System.DataAccess.UploadFile.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UploadFile.CreateInsertCommand(BaoMen.Framework.System.Entity.UploadFile)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns> 
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UploadFile.CreateUpdateCommand(BaoMen.Framework.System.Entity.UploadFile)">
            <summary>
            取得更新数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UploadFile.CreateDeleteCommand(BaoMen.Framework.System.Entity.UploadFile)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UploadFile.CreateGetCommand(System.Int32)">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UploadFile.CreateFilterSqlWhere(BaoMen.Framework.System.Entity.UploadFileFilter)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UploadFile.DoInsert(BaoMen.Framework.System.Entity.UploadFile,System.Data.IDbTransaction,System.Action{System.Data.IDbConnection,System.Data.IDbTransaction})">
            <summary>
            重写方法，将数据库生成的ID赋值给实例
            </summary>
            <param name="item">实体</param>
            <param name="transaction"></param>
            <param name="getIdentity"></param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.DataAccess.User">
            <summary>
            系统用户数据访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.User.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="P:BaoMen.Framework.System.DataAccess.User.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.User.CreateInsertCommand(BaoMen.Framework.System.Entity.User)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns> 
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.User.CreateDeleteCommand(BaoMen.Framework.System.Entity.User)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.User.CreateGetCommand(System.String)">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.User.CreateFilterSqlWhere(BaoMen.Framework.System.Entity.UserFilter)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.User.CreateUpdateCommand(BaoMen.Framework.System.Entity.User)">
            <summary>
            取得更新数据的数据库命令（不更新密码）
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.User.ModifyPassword(BaoMen.Framework.System.Entity.User,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            修改密码
            </summary>
            <param name="item">用户实体</param>
            <param name="connection">数据库连接</param>
            <param name="transaction">数据库事务</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.User.ModifyAvatar(BaoMen.Framework.System.Entity.User,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            修改头像
            </summary>
            <param name="item">用户实体</param>
            <param name="connection">数据库连接</param>
            <param name="transaction">数据库事务</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.User.ModifyPersonalSetting(BaoMen.Framework.System.Entity.User)">
            <summary>
            修改个人设置
            </summary>
            <param name="item">用户实体</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.DataAccess.UserLoginHistory">
            <summary>
            系统用户登录历史数据访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserLoginHistory.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="P:BaoMen.Framework.System.DataAccess.UserLoginHistory.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserLoginHistory.CreateInsertCommand(BaoMen.Framework.System.Entity.UserLoginHistory)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns> 
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserLoginHistory.CreateUpdateCommand(BaoMen.Framework.System.Entity.UserLoginHistory)">
            <summary>
            取得更新数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserLoginHistory.CreateDeleteCommand(BaoMen.Framework.System.Entity.UserLoginHistory)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserLoginHistory.CreateGetCommand(System.Int32)">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserLoginHistory.CreateFilterSqlWhere(BaoMen.Framework.System.Entity.UserLoginHistoryFilter)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="T:BaoMen.Framework.System.DataAccess.UserRole">
            <summary>
            用户角色数据访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserRole.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="P:BaoMen.Framework.System.DataAccess.UserRole.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserRole.CreateInsertCommand(BaoMen.Framework.System.Entity.UserRole)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns> 
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserRole.CreateUpdateCommand(BaoMen.Framework.System.Entity.UserRole)">
            <summary>
            取得更新数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserRole.CreateDeleteCommand(BaoMen.Framework.System.Entity.UserRole)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserRole.CreateGetCommand(System.Tuple{System.String,System.String})">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserRole.CreateFilterSqlWhere(BaoMen.Framework.System.Entity.UserRoleFilter)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserRole.Delete(System.String,System.Data.IDbTransaction)">
            <summary>
            删除用户的角色
            </summary>
            <param name="userId">用户ID</param>
            <param name="transaction">数据库事务</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserRole.DeleteByRoleId(System.String,System.Data.IDbTransaction)">
            <summary>
            删除用户的角色
            </summary>
            <param name="roleId">角色ID</param>
            <param name="transaction">数据库事务</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.DataAccess.UserToken">
            <summary>
            系统用户令牌数据访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserToken.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="P:BaoMen.Framework.System.DataAccess.UserToken.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserToken.CreateInsertCommand(BaoMen.Framework.System.Entity.UserToken)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns> 
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserToken.CreateUpdateCommand(BaoMen.Framework.System.Entity.UserToken)">
            <summary>
            取得更新数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserToken.CreateDeleteCommand(BaoMen.Framework.System.Entity.UserToken)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserToken.CreateGetCommand(System.String)">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserToken.CreateFilterSqlWhere(BaoMen.Framework.System.Entity.UserTokenFilter)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="M:BaoMen.Framework.System.DataAccess.UserToken.ExpireToken(System.String,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            过期Token
            </summary>
            <param name="userId">用户ID</param>
            <param name="connection">数据库连接</param>
            <param name="transaction">数据库事务</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.City">
            <summary>
            地市信息实体
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.City.Id">
            <summary>
            ID
            </summary>
            <remarks>
            ColumnName: Id (Primary Key)
            ColumnType: CHAR(6)
            AllowDBNull: False
            Unique: True
            Size: 6
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.City.Name">
            <summary>
            名称
            </summary>
            <remarks>
            ColumnName: Name 
            ColumnType: VARCHAR(50)
            AllowDBNull: False
            Unique: False
            Size: 50
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.City.AreaCode">
            <summary>
            区号
            </summary>
            <remarks>
            ColumnName: AreaCode 
            ColumnType: VARCHAR(20)
            AllowDBNull: True
            Unique: False
            Size: 20
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.City.Status">
            <summary>
            状态
            </summary>
            <remarks>
            ColumnName: Status 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.CityFilter">
            <summary>
            地市信息实体过滤器
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.CityFilter.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.CityFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.CityFilter.AreaCode">
            <summary>
            区号
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.CityFilter.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.District">
            <summary>
            地区信息实体
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.District.Id">
            <summary>
            ID
            </summary>
            <remarks>
            ColumnName: Id (Primary Key)
            ColumnType: CHAR(6)
            AllowDBNull: False
            Unique: True
            Size: 6
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.District.Name">
            <summary>
            名称
            </summary>
            <remarks>
            ColumnName: Name 
            ColumnType: VARCHAR(50)
            AllowDBNull: False
            Unique: False
            Size: 50
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.District.Status">
            <summary>
            状态
            </summary>
            <remarks>
            ColumnName: Status 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.DistrictFilter">
            <summary>
            地区信息实体过滤器
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DistrictFilter.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DistrictFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DistrictFilter.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.DownloadFile">
            <summary>
            系统下载文件实体
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFile.Id">
            <summary>
            ID
            </summary>
            <remarks>
            ColumnName: Id (Primary Key)
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: True
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFile.Type">
            <summary>
            文件类型
            </summary>
            <remarks>
            ColumnName: Type 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFile.OriginalFileName">
            <summary>
            原始文件名
            </summary>
            <remarks>
            ColumnName: OriginalFileName 
            ColumnType: VARCHAR(200)
            AllowDBNull: False
            Unique: False
            Size: 200
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFile.FileName">
            <summary>
            文件名
            </summary>
            <remarks>
            ColumnName: FileName 
            ColumnType: CHAR(32)
            AllowDBNull: False
            Unique: False
            Size: 32
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFile.ExtentionName">
            <summary>
            扩展名
            </summary>
            <remarks>
            ColumnName: ExtentionName 
            ColumnType: VARCHAR(20)
            AllowDBNull: False
            Unique: False
            Size: 20
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFile.RelativePath">
            <summary>
            相对路径
            </summary>
            <remarks>
            ColumnName: RelativePath 
            ColumnType: VARCHAR(200)
            AllowDBNull: False
            Unique: False
            Size: 200
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFile.CreateTime">
            <summary>
            创建时间
            </summary>
            <remarks>
            ColumnName: CreateTime 
            ColumnType: DATETIME
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFile.RelatedId">
            <summary>
            关联ID
            </summary>
            <remarks>
            ColumnName: RelatedId 
            ColumnType: VARCHAR(100)
            AllowDBNull: True
            Unique: False
            Size: 100
            </remarks>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.DownloadFileFilter">
            <summary>
            系统下载文件实体过滤器
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFileFilter.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFileFilter.Type">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFileFilter.OriginalFileName">
            <summary>
            原始文件名
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFileFilter.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFileFilter.ExtentionName">
            <summary>
            扩展名
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFileFilter.RelativePath">
            <summary>
            相对路径
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFileFilter.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFileFilter.CreateTimeMin">
            <summary>
            创建时间最小值
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFileFilter.CreateTimeMax">
            <summary>
            创建时间最大值
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.DownloadFileFilter.RelatedId">
            <summary>
            关联ID
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.Module">
            <summary>
            系统模块实体
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Module.Id">
            <summary>
            ID
            </summary>
            <remarks>
            ColumnName: Id (Primary Key)
            ColumnType: CHAR(32)
            AllowDBNull: False
            Unique: True
            Size: 32
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Module.ParentId">
            <summary>
            父ID
            </summary>
            <remarks>
            ColumnName: ParentId (Foreign Key)
            ColumnType: CHAR(32)
            AllowDBNull: True
            Unique: False
            Size: 32
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Module.Name">
            <summary>
            名称
            </summary>
            <remarks>
            ColumnName: Name 
            ColumnType: VARCHAR(100)
            AllowDBNull: False
            Unique: False
            Size: 100
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Module.VisibleIndex">
            <summary>
            显示顺序
            </summary>
            <remarks>
            ColumnName: VisibleIndex 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Module.Type">
            <summary>
            类型
            </summary>
            <remarks>
            ColumnName: Type 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Module.Method">
            <summary>
            方法
            </summary>
            <remarks>
            ColumnName: Method 
            ColumnType: VARCHAR(200)
            AllowDBNull: True
            Unique: False
            Size: 200
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Module.WorkflowActivityId">
            <summary>
            工作流活动ID
            </summary>
            <remarks>
            ColumnName: WorkflowActivityId 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Module.IsNode">
            <summary>
            是否节点
            </summary>
            <remarks>
            ColumnName: IsNode 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Module.Status">
            <summary>
            状态
            </summary>
            <remarks>
            ColumnName: Status 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Module.Description">
            <summary>
            描述
            </summary>
            <remarks>
            ColumnName: Description 
            ColumnType: VARCHAR(500)
            AllowDBNull: True
            Unique: False
            Size: 500
            </remarks>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.ModuleFilter">
            <summary>
            系统模块实体过滤器
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ModuleFilter.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ModuleFilter.ParentId">
            <summary>
            父ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ModuleFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ModuleFilter.VisibleIndex">
            <summary>
            显示顺序
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ModuleFilter.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ModuleFilter.Method">
            <summary>
            方法
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ModuleFilter.WorkflowActivityId">
            <summary>
            工作流活动ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ModuleFilter.IsNode">
            <summary>
            是否节点
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ModuleFilter.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ModuleFilter.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ModuleFilter.WorkflowActivityIds">
            <summary>
            工作流活动ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ModuleFilter.Types">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.OperateHistory">
            <summary>
            系统操作日志实体
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistory.Id">
            <summary>
            流水号
            </summary>
            <remarks>
            ColumnName: Id (Primary Key)
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: True
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistory.UserId">
            <summary>
            系统用户ID
            </summary>
            <remarks>
            ColumnName: UserId 
            ColumnType: CHAR(32)
            AllowDBNull: False
            Unique: False
            Size: 32
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistory.Type">
            <summary>
            操作类型
            </summary>
            <remarks>
            ColumnName: Type 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistory.OperateTime">
            <summary>
            操作时间
            </summary>
            <remarks>
            ColumnName: OperateTime 
            ColumnType: DATETIME
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistory.AssemblyName">
            <summary>
            程序集
            </summary>
            <remarks>
            ColumnName: AssemblyName 
            ColumnType: VARCHAR(255)
            AllowDBNull: False
            Unique: False
            Size: 255
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistory.EntityType">
            <summary>
            实体类型
            </summary>
            <remarks>
            ColumnName: EntityType 
            ColumnType: VARCHAR(255)
            AllowDBNull: False
            Unique: False
            Size: 255
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistory.RelatedId">
            <summary>
            相关ID
            </summary>
            <remarks>
            ColumnName: RelatedId 
            ColumnType: VARCHAR(100)
            AllowDBNull: False
            Unique: False
            Size: 100
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistory.Value">
            <summary>
            值
            </summary>
            <remarks>
            ColumnName: Value 
            ColumnType: MEDIUMTEXT
            AllowDBNull: False
            Unique: False
            Size: 16777215
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistory.Description">
            <summary>
            描述
            </summary>
            <remarks>
            ColumnName: Description 
            ColumnType: VARCHAR(512)
            AllowDBNull: True
            Unique: False
            Size: 512
            </remarks>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.OperateHistoryFilter">
            <summary>
            系统操作日志实体过滤器
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistoryFilter.Id">
            <summary>
            流水号
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistoryFilter.UserId">
            <summary>
            系统用户ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistoryFilter.Type">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistoryFilter.OperateTime">
            <summary>
            操作时间
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistoryFilter.OperateTimeMin">
            <summary>
            操作时间最小值
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistoryFilter.OperateTimeMax">
            <summary>
            操作时间最大值
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistoryFilter.AssemblyName">
            <summary>
            程序集
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistoryFilter.EntityType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistoryFilter.RelatedId">
            <summary>
            相关ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistoryFilter.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.OperateHistoryFilter.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.Parameter">
            <summary>
            系统参数实体
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Parameter.Id">
            <summary>
            标识
            </summary>
            <remarks>
            ColumnName: Id (Primary Key)
            ColumnType: VARCHAR(100)
            AllowDBNull: False
            Unique: True
            Size: 100
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Parameter.ParentId">
            <summary>
            父标识
            </summary>
            <remarks>
            ColumnName: ParentId 
            ColumnType: VARCHAR(100)
            AllowDBNull: False
            Unique: False
            Size: 100
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Parameter.Name">
            <summary>
            名称
            </summary>
            <remarks>
            ColumnName: Name 
            ColumnType: VARCHAR(255)
            AllowDBNull: False
            Unique: False
            Size: 255
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Parameter.Value">
            <summary>
            参数值
            </summary>
            <remarks>
            ColumnName: Value 
            ColumnType: VARCHAR(2048)
            AllowDBNull: True
            Unique: False
            Size: 2048
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Parameter.IsNode">
            <summary>
            是否节点
            </summary>
            <remarks>
            ColumnName: IsNode 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Parameter.Description">
            <summary>
            描述
            </summary>
            <remarks>
            ColumnName: Description 
            ColumnType: VARCHAR(500)
            AllowDBNull: True
            Unique: False
            Size: 500
            </remarks>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.ParameterFilter">
            <summary>
            系统参数实体过滤器
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ParameterFilter.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ParameterFilter.ParentId">
            <summary>
            父标识
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ParameterFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ParameterFilter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ParameterFilter.IsNode">
            <summary>
            是否节点
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ParameterFilter.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.Province">
            <summary>
            省份信息实体
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Province.Id">
            <summary>
            ID
            </summary>
            <remarks>
            ColumnName: Id (Primary Key)
            ColumnType: CHAR(6)
            AllowDBNull: False
            Unique: True
            Size: 6
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Province.Name">
            <summary>
            名称
            </summary>
            <remarks>
            ColumnName: Name 
            ColumnType: VARCHAR(50)
            AllowDBNull: False
            Unique: False
            Size: 50
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Province.Status">
            <summary>
            状态
            </summary>
            <remarks>
            ColumnName: Status 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.ProvinceFilter">
            <summary>
            省份信息实体过滤器
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ProvinceFilter.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ProvinceFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.ProvinceFilter.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.Role">
            <summary>
            系统角色实体
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Role.Id">
            <summary>
            标识
            </summary>
            <remarks>
            ColumnName: Id (Primary Key)
            ColumnType: CHAR(32)
            AllowDBNull: False
            Unique: True
            Size: 32
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Role.Name">
            <summary>
            名称
            </summary>
            <remarks>
            ColumnName: Name 
            ColumnType: VARCHAR(100)
            AllowDBNull: False
            Unique: False
            Size: 100
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Role.Status">
            <summary>
            状态
            </summary>
            <remarks>
            ColumnName: Status 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Role.Description">
            <summary>
            描述
            </summary>
            <remarks>
            ColumnName: Description 
            ColumnType: VARCHAR(500)
            AllowDBNull: True
            Unique: False
            Size: 500
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.Role.Modules">
            <summary>
            拥有的模块
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.RoleFilter">
            <summary>
            系统角色实体过滤器
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.RoleFilter.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.RoleFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.RoleFilter.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.RoleFilter.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.RoleModule">
            <summary>
            角色模块实体
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.RoleModule.ComplexKey">
            <summary>
            复合主键Item1:RoleId  Item2:ModuleId  
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.RoleModule.RoleId">
            <summary>
            
            </summary>
            <remarks>
            ColumnName: RoleId (Primary Key)
            ColumnType: CHAR(32)
            AllowDBNull: False
            Unique: False
            Size: 32
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.RoleModule.ModuleId">
            <summary>
            
            </summary>
            <remarks>
            ColumnName: ModuleId (Primary Key)
            ColumnType: CHAR(32)
            AllowDBNull: False
            Unique: False
            Size: 32
            </remarks>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.RoleModuleFilter">
            <summary>
            角色模块实体过滤器
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.RoleModuleFilter.RoleId">
            <summary>
            
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.RoleModuleFilter.ModuleId">
            <summary>
            
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.UploadFile">
            <summary>
            系统上传文件实体
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFile.Id">
            <summary>
            ID
            </summary>
            <remarks>
            ColumnName: Id (Primary Key)
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: True
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFile.Type">
            <summary>
            文件类型
            </summary>
            <remarks>
            ColumnName: Type 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFile.OriginalFileName">
            <summary>
            原始文件名
            </summary>
            <remarks>
            ColumnName: OriginalFileName 
            ColumnType: VARCHAR(200)
            AllowDBNull: False
            Unique: False
            Size: 200
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFile.FileName">
            <summary>
            文件名
            </summary>
            <remarks>
            ColumnName: FileName 
            ColumnType: CHAR(32)
            AllowDBNull: False
            Unique: False
            Size: 32
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFile.ExtentionName">
            <summary>
            扩展名
            </summary>
            <remarks>
            ColumnName: ExtentionName 
            ColumnType: VARCHAR(20)
            AllowDBNull: False
            Unique: False
            Size: 20
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFile.RelativePath">
            <summary>
            相对路径
            </summary>
            <remarks>
            ColumnName: RelativePath 
            ColumnType: VARCHAR(200)
            AllowDBNull: False
            Unique: False
            Size: 200
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFile.CreateTime">
            <summary>
            创建时间
            </summary>
            <remarks>
            ColumnName: CreateTime 
            ColumnType: DATETIME
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFile.CreateUserId">
            <summary>
            创建人
            </summary>
            <remarks>
            ColumnName: CreateUserId 
            ColumnType: CHAR(32)
            AllowDBNull: False
            Unique: False
            Size: 32
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFile.RelatedId">
            <summary>
            关联ID
            </summary>
            <remarks>
            ColumnName: RelatedId 
            ColumnType: VARCHAR(100)
            AllowDBNull: True
            Unique: False
            Size: 100
            </remarks>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.UploadFileFilter">
            <summary>
            系统上传文件实体过滤器
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFileFilter.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFileFilter.Type">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFileFilter.OriginalFileName">
            <summary>
            原始文件名
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFileFilter.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFileFilter.ExtentionName">
            <summary>
            扩展名
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFileFilter.RelativePath">
            <summary>
            相对路径
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFileFilter.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFileFilter.CreateTimeMin">
            <summary>
            创建时间最小值
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFileFilter.CreateTimeMax">
            <summary>
            创建时间最大值
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFileFilter.CreateUserId">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UploadFileFilter.RelatedId">
            <summary>
            关联ID
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.User">
            <summary>
            系统用户实体
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.Id">
            <summary>
            ID
            </summary>
            <remarks>
            ColumnName: Id (Primary Key)
            ColumnType: CHAR(32)
            AllowDBNull: False
            Unique: True
            Size: 32
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.UserName">
            <summary>
            用户名
            </summary>
            <remarks>
            ColumnName: UserName 
            ColumnType: VARCHAR(100)
            AllowDBNull: False
            Unique: False
            Size: 100
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.Password">
            <summary>
            密码
            </summary>
            <remarks>
            ColumnName: Password 
            ColumnType: CHAR(32)
            AllowDBNull: False
            Unique: False
            Size: 32
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.Name">
            <summary>
            姓名
            </summary>
            <remarks>
            ColumnName: Name 
            ColumnType: VARCHAR(100)
            AllowDBNull: False
            Unique: False
            Size: 100
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.Mobile">
            <summary>
            手机号码
            </summary>
            <remarks>
            ColumnName: Mobile 
            ColumnType: VARCHAR(50)
            AllowDBNull: False
            Unique: False
            Size: 50
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.Email">
            <summary>
            电子邮件
            </summary>
            <remarks>
            ColumnName: Email 
            ColumnType: VARCHAR(100)
            AllowDBNull: False
            Unique: False
            Size: 100
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.Avatar">
            <summary>
            头像
            </summary>
            <remarks>
            ColumnName: Avatar 
            ColumnType: VARCHAR(200)
            AllowDBNull: True
            Unique: False
            Size: 200
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.CreateTime">
            <summary>
            创建时间
            </summary>
            <remarks>
            ColumnName: CreateTime 
            ColumnType: DATETIME
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.Status">
            <summary>
            状态
            </summary>
            <remarks>
            ColumnName: Status 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.WechatOpenId">
            <summary>
            微信OpenId
            </summary>
            <remarks>
            ColumnName: WechatOpenId 
            ColumnType: VARCHAR(50)
            AllowDBNull: False
            Unique: False
            Size: 50
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.WechatMpOpenId">
            <summary>
            微信小程序OpenId
            </summary>
            <remarks>
            ColumnName: WechatMpOpenId 
            ColumnType: VARCHAR(50)
            AllowDBNull: False
            Unique: False
            Size: 50
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.WechatUnionId">
            <summary>
            微信UnionId
            </summary>
            <remarks>
            ColumnName: WechatUnionId 
            ColumnType: VARCHAR(50)
            AllowDBNull: False
            Unique: False
            Size: 50
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.DingTalkId">
            <summary>
            钉钉ID
            </summary>
            <remarks>
            ColumnName: DingTalkId 
            ColumnType: VARCHAR(50)
            AllowDBNull: False
            Unique: False
            Size: 50
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.AlipayId">
            <summary>
            支付宝ID
            </summary>
            <remarks>
            ColumnName: AlipayId 
            ColumnType: VARCHAR(50)
            AllowDBNull: False
            Unique: False
            Size: 50
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.Description">
            <summary>
            描述
            </summary>
            <remarks>
            ColumnName: Description 
            ColumnType: VARCHAR(500)
            AllowDBNull: True
            Unique: False
            Size: 500
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.User.Roles">
            <summary>
            所属的角色
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.UserFilter">
            <summary>
            系统用户实体过滤器
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.Mobile">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.Email">
            <summary>
            电子邮件
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.Avatar">
            <summary>
            头像
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.CreateTimeMin">
            <summary>
            创建时间最小值
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.CreateTimeMax">
            <summary>
            创建时间最大值
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.WechatOpenId">
            <summary>
            微信OpenId
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.WechatMpOpenId">
            <summary>
            微信小程序OpenId
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.WechatUnionId">
            <summary>
            微信UnionId
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.DingTalkId">
            <summary>
            钉钉ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.AlipayId">
            <summary>
            支付宝ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserFilter.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.UserLoginHistory">
            <summary>
            系统用户登录历史实体
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistory.Id">
            <summary>
            ID
            </summary>
            <remarks>
            ColumnName: Id (Primary Key)
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: True
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistory.UserName">
            <summary>
            用户名
            </summary>
            <remarks>
            ColumnName: UserName 
            ColumnType: VARCHAR(100)
            AllowDBNull: False
            Unique: False
            Size: 100
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistory.LoginTime">
            <summary>
            登录时间
            </summary>
            <remarks>
            ColumnName: LoginTime 
            ColumnType: DATETIME
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistory.Type">
            <summary>
            类型
            </summary>
            <remarks>
            ColumnName: Type 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistory.Result">
            <summary>
            结果
            </summary>
            <remarks>
            ColumnName: Result 
            ColumnType: INT(11)
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistory.UserAgent">
            <summary>
            客户端
            </summary>
            <remarks>
            ColumnName: UserAgent 
            ColumnType: VARCHAR(1000)
            AllowDBNull: True
            Unique: False
            Size: 1000
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistory.ClientIp">
            <summary>
            客户端IP
            </summary>
            <remarks>
            ColumnName: ClientIp 
            ColumnType: VARCHAR(50)
            AllowDBNull: True
            Unique: False
            Size: 50
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistory.ServerIp">
            <summary>
            服务端IP
            </summary>
            <remarks>
            ColumnName: ServerIp 
            ColumnType: VARCHAR(50)
            AllowDBNull: True
            Unique: False
            Size: 50
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistory.Description">
            <summary>
            描述
            </summary>
            <remarks>
            ColumnName: Description 
            ColumnType: VARCHAR(500)
            AllowDBNull: True
            Unique: False
            Size: 500
            </remarks>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.UserLoginHistoryFilter">
            <summary>
            系统用户登录历史实体过滤器
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistoryFilter.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistoryFilter.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistoryFilter.LoginTime">
            <summary>
            登录时间
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistoryFilter.LoginTimeMin">
            <summary>
            登录时间最小值
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistoryFilter.LoginTimeMax">
            <summary>
            登录时间最大值
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistoryFilter.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistoryFilter.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistoryFilter.UserAgent">
            <summary>
            客户端
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistoryFilter.ClientIp">
            <summary>
            客户端IP
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistoryFilter.ServerIp">
            <summary>
            服务端IP
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserLoginHistoryFilter.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.UserRole">
            <summary>
            用户角色实体
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserRole.ComplexKey">
            <summary>
            复合主键Item1:UserId  Item2:RoleId  
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserRole.UserId">
            <summary>
            用户ID
            </summary>
            <remarks>
            ColumnName: UserId (Primary Key)
            ColumnType: CHAR(32)
            AllowDBNull: False
            Unique: False
            Size: 32
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserRole.RoleId">
            <summary>
            角色ID
            </summary>
            <remarks>
            ColumnName: RoleId (Primary Key)
            ColumnType: CHAR(32)
            AllowDBNull: False
            Unique: False
            Size: 32
            </remarks>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.UserRoleFilter">
            <summary>
            用户角色实体过滤器
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserRoleFilter.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserRoleFilter.RoleId">
            <summary>
            角色ID
            </summary>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.UserToken">
            <summary>
            系统用户令牌实体
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserToken.UserId">
            <summary>
            用户ID
            </summary>
            <remarks>
            ColumnName: UserId (Primary Key)
            ColumnType: CHAR(32)
            AllowDBNull: False
            Unique: True
            Size: 32
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserToken.Token">
            <summary>
            令牌
            </summary>
            <remarks>
            ColumnName: Token 
            ColumnType: CHAR(32)
            AllowDBNull: False
            Unique: True
            Size: 32
            </remarks>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserToken.Expires">
            <summary>
            到期时间
            </summary>
            <remarks>
            ColumnName: Expires 
            ColumnType: DATETIME
            AllowDBNull: False
            Unique: False
            Size: 0
            </remarks>
        </member>
        <member name="T:BaoMen.Framework.System.Entity.UserTokenFilter">
            <summary>
            系统用户令牌实体过滤器
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserTokenFilter.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserTokenFilter.Token">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserTokenFilter.Expires">
            <summary>
            到期时间
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserTokenFilter.ExpiresMin">
            <summary>
            到期时间最小值
            </summary>
        </member>
        <member name="P:BaoMen.Framework.System.Entity.UserTokenFilter.ExpiresMax">
            <summary>
            到期时间最大值
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant">
            <summary>
            常量
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.PurchaseOrder">
            <summary>
            采购单
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.WorkflowCode">
            <summary>
            工作流编码
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.PurchaseOrder.ActivityCode">
            <summary>
            工作流活动编码
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.ActivityCode.Create">
            <summary>
            保存
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.ActivityCode.CreateAndSubmit">
            <summary>
            提交
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.ActivityCode.Edit">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.ActivityCode.Submit">
            <summary>
            提交审核
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.ActivityCode.Cancel">
            <summary>
            取消采购
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.ActivityCode.Approve">
            <summary>
            审批通过
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.ActivityCode.SendBack">
            <summary>
            退回修改
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.ActivityCode.Pay">
            <summary>
            付款
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.ActivityCode.Receiving">
            <summary>
            确认收货
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.ActivityCode.Received">
            <summary>
            收货完成
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.ActivityCode.Paid">
            <summary>
            付款完成
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.PurchaseOrder.PayState">
            <summary>
            付款状态
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.PayState.NotPay">
            <summary>
            未支付
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.PayState.PartialPay">
            <summary>
            部分支付
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PurchaseOrder.PayState.Paid">
            <summary>
            已付清
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.StorageOrder">
            <summary>
            库存单
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.StorageOrder.WorkflowCode">
            <summary>
            工作流编码
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.StorageOrder.ActivityCode">
            <summary>
            工作流活动编码
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.StorageOrder.ActivityCode.Submit">
            <summary>
            提交审核
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.StorageOrder.ActivityCode.Cancel">
            <summary>
            取消采购
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.StorageOrder.ActivityCode.Approve">
            <summary>
            审批通过
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.StorageOrder.ActivityCode.Create">
            <summary>
            新建
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.StorageOrder.ActionCode">
            <summary>
            工作流动作编码
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.StorageOrder.ActionCode.Create">
            <summary>
            保存（新建）
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.PaymentOrder">
            <summary>
            付款单
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PaymentOrder.WorkflowCode">
            <summary>
            工作流编码
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.PaymentOrder.ActivityCode">
            <summary>
            工作流活动编码
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PaymentOrder.ActivityCode.Create">
            <summary>
            保存
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PaymentOrder.ActivityCode.Submit">
            <summary>
            提交
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PaymentOrder.ActivityCode.Cancel">
            <summary>
            取消付款
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PaymentOrder.ActivityCode.Edit">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PaymentOrder.ActivityCode.Approve">
            <summary>
            同意
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PaymentOrder.ActivityCode.SendBack">
            <summary>
            返回修改
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.PaymentOrder.ActionCode">
            <summary>
            工作流动作编码
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PaymentOrder.ActionCode.Create">
            <summary>
            保存
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PaymentOrder.ActionCode.CreateAndSubmit">
            <summary>
            保存并提交
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PaymentOrder.ActionCode.Edit">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PaymentOrder.ActionCode.EditAndSubmit">
            <summary>
            编辑并提交
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.PersonPaymentOrder">
            <summary>
            付款单
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PersonPaymentOrder.WorkflowCode">
            <summary>
            工作流编码
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.PersonPaymentOrder.ActivityCode">
            <summary>
            工作流活动编码
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PersonPaymentOrder.ActivityCode.Create">
            <summary>
            保存
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PersonPaymentOrder.ActivityCode.Submit">
            <summary>
            提交
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PersonPaymentOrder.ActivityCode.Cancel">
            <summary>
            取消付款
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PersonPaymentOrder.ActivityCode.Edit">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PersonPaymentOrder.ActivityCode.Approve">
            <summary>
            同意
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PersonPaymentOrder.ActivityCode.SendBack">
            <summary>
            返回修改
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.PersonPaymentOrder.ActionCode">
            <summary>
            工作流动作编码
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PersonPaymentOrder.ActionCode.Create">
            <summary>
            保存
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PersonPaymentOrder.ActionCode.CreateAndSubmit">
            <summary>
            保存并提交
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PersonPaymentOrder.ActionCode.Edit">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.PersonPaymentOrder.ActionCode.EditAndSubmit">
            <summary>
            编辑并提交
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.CollectionOrder">
            <summary>
            收款单
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.CollectionOrder.WorkflowCode">
            <summary>
            工作流编码
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.CollectionOrder.ActivityCode">
            <summary>
            工作流活动编码
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.CollectionOrder.ActivityCode.Create">
            <summary>
            保存
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.CollectionOrder.ActivityCode.Submit">
            <summary>
            提交
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.CollectionOrder.ActivityCode.Cancel">
            <summary>
            取消付款
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.CollectionOrder.ActivityCode.Edit">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.CollectionOrder.ActivityCode.Approve">
            <summary>
            同意
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.CollectionOrder.ActivityCode.SendBack">
            <summary>
            返回修改
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.CollectionOrder.ActionCode">
            <summary>
            工作流动作编码
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.CollectionOrder.ActionCode.Create">
            <summary>
            保存
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.CollectionOrder.ActionCode.CreateAndSubmit">
            <summary>
            保存并提交
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.CollectionOrder.ActionCode.Edit">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.CollectionOrder.ActionCode.EditAndSubmit">
            <summary>
            编辑并提交
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.SpotOrder">
            <summary>
            现货进货单
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.WorkflowCode">
            <summary>
            工作流编码
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.SpotOrder.ActivityCode">
            <summary>
            工作流活动编码
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActivityCode.Create">
            <summary>
            新建
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActivityCode.Edit">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActivityCode.Submit">
            <summary>
            提交审核
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActivityCode.Cancel">
            <summary>
            取消采购
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActivityCode.Approve">
            <summary>
            审批通过
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActivityCode.SendBack">
            <summary>
            退回修改
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActivityCode.Pay">
            <summary>
            付款
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActivityCode.Paid">
            <summary>
            付款完成
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActivityCode.Receiving">
            <summary>
            收货
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActivityCode.AutoReceiving">
            <summary>
            自动收货
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActivityCode.Received">
            <summary>
            收货完成
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.SpotOrder.ActionCode">
            <summary>
            工作流动作编码
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActionCode.Create">
            <summary>
            新建
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActionCode.CreateAndSubmit">
            <summary>
            新建并提交
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActionCode.Edit">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.ActionCode.EditAndSubmit">
            <summary>
            编辑并提交
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.SpotOrder.PayState">
            <summary>
            付款状态
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.PayState.NotPay">
            <summary>
            未支付
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.PayState.PartialPay">
            <summary>
            部分支付
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotOrder.PayState.Paid">
            <summary>
            已付清
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.SpotSalesOrder">
            <summary>
            现货销售单
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.WorkflowCode">
            <summary>
            工作流编码
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActivityCode">
            <summary>
            工作流活动编码
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActivityCode.Create">
            <summary>
            保存
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActivityCode.Edit">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActivityCode.Submit">
            <summary>
            提交审核
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActivityCode.Cancel">
            <summary>
            取消销售
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActivityCode.Approve">
            <summary>
            审批通过
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActivityCode.SendBack">
            <summary>
            退回修改
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActivityCode.Collect">
            <summary>
            收款
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActivityCode.Collected">
            <summary>
            收款完成
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActivityCode.Delivering">
            <summary>
            发货
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActivityCode.AutoDelivering">
            <summary>
            自动发货
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActivityCode.Delivered">
            <summary>
            发货完成
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActionCode">
            <summary>
            工作流动作编码
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActionCode.Create">
            <summary>
            新建
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActionCode.CreateAndSubmit">
            <summary>
            新建并提交
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActionCode.Edit">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.ActionCode.EditAndSubmit">
            <summary>
            编辑并提交
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Constant.SpotSalesOrder.PayState">
            <summary>
            付款状态
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.PayState.NotPay">
            <summary>
            未支付
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.PayState.PartialPay">
            <summary>
            部分支付
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.Constant.SpotSalesOrder.PayState.Paid">
            <summary>
            已付清
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.Extention">
            <summary>
            扩展类
            </summary>
        </member>
        <member name="M:BaoMen.Framework.Util.Extention.AddBmf(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            配置DI中业务逻辑
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.Util.Helper">
            <summary>
            帮助类
            </summary>
        </member>
        <member name="M:BaoMen.Framework.Util.Helper.Parse``1(System.Object)">
            <summary>
            将JObject转换为具体的类型
            </summary>
            <typeparam name="T">具体的类型</typeparam>
            <param name="value">objec包装过的JObject对象</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.Util.Helper.FromPercent(System.Decimal)">
            <summary>
            从百分比的值转换为decimal
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.Util.Helper.GetFee(System.Decimal)">
            <summary>
            四舍六入五成双算法计算费用
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.Util.Helper.GetFeeWithoutTax(System.Int32,System.Decimal)">
            <summary>
            计算不含税费用
            </summary>
            <param name="fee"></param>
            <param name="taxRate"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.Util.Helper.HttpDownload(System.String,System.String)">
            <summary>
            http下载文件
            </summary>
            <param name="url">下载文件地址</param>
            <param name="file">文件存放地址，包含文件名</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.Util.ICurrentUserService">
            <summary>
            当前商户用户接口
            </summary>
        </member>
        <member name="M:BaoMen.Framework.Util.ICurrentUserService.GetCurrentUser">
            <summary>
            获取当前用户
            </summary>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.Util.IGetKeyManager`1">
            <summary>
            根据名称取Key接口
            </summary>
            <typeparam name="TKey">Key的类型</typeparam>
        </member>
        <member name="M:BaoMen.Framework.Util.IGetKeyManager`1.GetKey(System.String)">
            <summary>
            根据名称取Key
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.Util.IGetNameManager`1">
            <summary>
            获取名称的业务逻辑接口
            </summary>
        </member>
        <member name="M:BaoMen.Framework.Util.IGetNameManager`1.GetName(`0)">
            <summary>
            根据关键字获取名称
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.Util.IMerchantData">
            <summary>
            商户数据接口
            </summary>
        </member>
        <member name="P:BaoMen.Framework.Util.IMerchantData.MerchantId">
            <summary>
            商户ID
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.IMerchantFilter">
            <summary>
            商户数据过滤器接口
            </summary>
        </member>
        <member name="P:BaoMen.Framework.Util.IMerchantFilter.MerchantId">
            <summary>
            商户ID
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.IMerchantService">
            <summary>
            商户服务
            </summary>
        </member>
        <member name="P:BaoMen.Framework.Util.IMerchantService.MerchantId">
            <summary>
            商户ID
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.IUser">
            <summary>
            系统用户接口
            </summary>
        </member>
        <member name="P:BaoMen.Framework.Util.IUser.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.IMerchantUser">
            <summary>
            商户用户接口
            </summary>
        </member>
        <member name="P:BaoMen.Framework.Util.IMerchantUser.MerchantId">
            <summary>
            商户ID
            </summary>
        </member>
        <member name="T:BaoMen.Framework.Util.MerchantBusinessLogicBase`4">
            <summary>
            可缓存的商户数据业务逻辑积累
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TFilter">过滤器类型</typeparam>
            <typeparam name="TDataAccess">数据访问类型</typeparam>
        </member>
        <member name="F:BaoMen.Framework.Util.MerchantBusinessLogicBase`4.serviceProvider">
            <summary>
            服务提供程序
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.MerchantBusinessLogicBase`4.httpContextAccessor">
            <summary>
            http上下文访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.Util.MerchantBusinessLogicBase`4.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
            <param name="serviceProvider">服务提供程序</param>
        </member>
        <member name="M:BaoMen.Framework.Util.MerchantBusinessLogicBase`4.GetMerchantService">
            <summary>
            获取商户服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.Util.MerchantBusinessLogicBase`4.GetMerchantId">
            <summary>
            获取商户ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.Util.MerchantBusinessLogicBase`4.PrepareFilter(`2)">
            <summary>
            准备过滤器
            </summary>
            <param name="filter"></param>
        </member>
        <member name="T:BaoMen.Framework.Util.MerchantCacheableBusinessLogicBase`4">
            <summary>
            可缓存的商户数据业务逻辑积累
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TFilter">过滤器类型</typeparam>
            <typeparam name="TDataAccess">数据访问类型</typeparam>
        </member>
        <member name="F:BaoMen.Framework.Util.MerchantCacheableBusinessLogicBase`4.serviceProvider">
            <summary>
            服务提供程序
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.MerchantCacheableBusinessLogicBase`4.httpContextAccessor">
            <summary>
            http上下文访问
            </summary>
        </member>
        <member name="M:BaoMen.Framework.Util.MerchantCacheableBusinessLogicBase`4.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
            <param name="serviceProvider">服务提供程序</param>
        </member>
        <member name="M:BaoMen.Framework.Util.MerchantCacheableBusinessLogicBase`4.GetCacheKey">
            <summary>
            获取缓存的键
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.Util.MerchantCacheableBusinessLogicBase`4.GetMerchantId">
            <summary>
            获取商户ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.Util.MerchantCacheableBusinessLogicBase`4.DoGetCacheData">
            <summary>
            取得缓存的数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Framework.Util.MerchantHierarchicalCacheableBusinessLogicBase`4">
            <summary>
            带缓存和过滤器的分层结构业务逻辑
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
            <typeparam name="TEntity">实体类型。必须实现IHierarchicalData接口</typeparam>
            <typeparam name="TFilter">实体过滤器类型</typeparam>
            <typeparam name="TDataAccess">数据访问类型</typeparam>
        </member>
        <member name="F:BaoMen.Framework.Util.MerchantHierarchicalCacheableBusinessLogicBase`4.httpContextAccessor">
            <summary>
            http上下文访问
            </summary>
        </member>
        <member name="F:BaoMen.Framework.Util.MerchantHierarchicalCacheableBusinessLogicBase`4.serviceProvider">
            <summary>
            服务提供程序
            </summary>
        </member>
        <member name="M:BaoMen.Framework.Util.MerchantHierarchicalCacheableBusinessLogicBase`4.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置实例</param>
            <param name="serviceProvider">服务提供程序</param>
        </member>
        <member name="M:BaoMen.Framework.Util.MerchantHierarchicalCacheableBusinessLogicBase`4.GetCacheKey">
            <summary>
            获取缓存的键
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.Util.MerchantHierarchicalCacheableBusinessLogicBase`4.GetMerchantId">
            <summary>
            获取商户ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Framework.Util.MerchantHierarchicalCacheableBusinessLogicBase`4.DoGetCacheData">
            <summary>
            取得缓存的数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Cache.CacheFactory">
            <summary>
            缓存工厂
            </summary>
        </member>
        <member name="M:BaoMen.Common.Cache.CacheFactory.Get(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获得缓存实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Cache.CacheSynchronizedEventArgs">
            <summary>
            缓存同步完成事件参数
            </summary>
        </member>
        <member name="P:BaoMen.Common.Cache.CacheSynchronizedEventArgs.Key">
            <summary>
            缓存的键
            </summary>
        </member>
        <member name="T:BaoMen.Common.Cache.CacheSynchronizingEventArgs">
            <summary>
            缓存同步事件参数
            </summary>
        </member>
        <member name="P:BaoMen.Common.Cache.CacheSynchronizingEventArgs.Cancel">
            <summary>
            是否取消同步
            </summary>
        </member>
        <member name="T:BaoMen.Common.Cache.ICache">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:BaoMen.Common.Cache.ICache.Get(System.String)">
            <summary>
            获取缓存的数据
            </summary>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Cache.ICache.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key">关键字</param>
        </member>
        <member name="M:BaoMen.Common.Cache.ICache.Set(System.String,System.Object)">
            <summary>
            设置缓存的值
            </summary>
            <param name="key">关键字</param>
            <param name="value">值</param>
        </member>
        <member name="T:BaoMen.Common.Cache.ISynchronizedCache">
            <summary>
            可同步的缓存接口
            </summary>
        </member>
        <member name="E:BaoMen.Common.Cache.ISynchronizedCache.OnSynchronizing">
            <summary>
            开始同步
            </summary>
        </member>
        <member name="E:BaoMen.Common.Cache.ISynchronizedCache.OnSynchronized">
            <summary>
            结束同步
            </summary>
        </member>
        <member name="T:BaoMen.Common.Cache.MemoryCache">
            <summary>
            内存缓存类
            </summary>
        </member>
        <member name="M:BaoMen.Common.Cache.MemoryCache.Get(System.String)">
            <summary>
            获取缓存的数据
            </summary>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Cache.MemoryCache.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key">关键字</param>
        </member>
        <member name="M:BaoMen.Common.Cache.MemoryCache.Set(System.String,System.Object)">
            <summary>
            设置缓存的值
            </summary>
            <param name="key">关键字</param>
            <param name="value">值</param>
        </member>
        <member name="T:BaoMen.Common.Cache.RabbitMQSynchronizedCache">
            <summary>
            基于RabbitMQ同步的缓存
            </summary>
        </member>
        <member name="M:BaoMen.Common.Cache.RabbitMQSynchronizedCache.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造函数
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:BaoMen.Common.Cache.RabbitMQSynchronizedCache.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="T:BaoMen.Common.Constant.Bracket">
            <summary>
            括号
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.Bracket.LeftParenthesis">
            <summary>
            左圆括号 (
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.Bracket.RightParenthesis">
            <summary>
            右圆括号 )
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.Bracket.LeftSquareBracket">
            <summary>
            左方括号 [
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.Bracket.RightSquareBracket">
            <summary>
            右方括号 ]
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.Bracket.LeftAngelBracket">
            <summary>
            左尖括号 &lt;
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.Bracket.RightAngelBracket">
            <summary>
            右尖括号 &gt;
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.Bracket.LeftBrace">
            <summary>
            左大括号 {
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.Bracket.RightBrace">
            <summary>
            右大括号 }
            </summary>
        </member>
        <member name="T:BaoMen.Common.Constant.DataOperationType">
            <summary>
            数据操作
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DataOperationType.None">
            <summary>
            无操作
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DataOperationType.Select">
            <summary>
            查询
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DataOperationType.Insert">
            <summary>
            插入
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DataOperationType.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DataOperationType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="T:BaoMen.Common.Constant.DateTimeFormat">
            <summary>
            时间格式化串
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DateTimeFormat.LongYearToMillisecond">
            <summary>
            长日期。从年到毫秒
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DateTimeFormat.LongYearToSecond">
            <summary>
            长日期。从年到秒
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DateTimeFormat.LongYearToDay">
            <summary>
            长日期。从年到天
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DateTimeFormat.LongHourToSecond">
            <summary>
            长日期。从小时到秒
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DateTimeFormat.ShortYearToSecond">
            <summary>
            短日期。从年到秒。
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DateTimeFormat.ShortYearToDay">
            <summary>
            短日期。从年到天。
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DateTimeFormat.ShortHourToSecond">
            <summary>
            短日期。从小时到秒
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DateTimeFormat.Character14">
            <summary>
            14个字符的时间日期格式
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DateTimeFormat.Character17">
            <summary>
            17个字符的时间日期格式
            </summary>
        </member>
        <member name="T:BaoMen.Common.Constant.DbCompareOperator">
            <summary>
            比较操作符枚举
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbCompareOperator.Equal">
            <summary>
            相等比较
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbCompareOperator.NotEqual">
            <summary>
            不等比较
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbCompareOperator.GreaterThan">
            <summary>
            大于比较
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbCompareOperator.GreaterThanOrEqual">
            <summary>
            大于或等于比较
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbCompareOperator.LessThan">
            <summary>
            小于比较
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbCompareOperator.LessThanOrEqual">
            <summary>
            小于或等于比较
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbCompareOperator.IsNull">
            <summary>
            为空
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbCompareOperator.IsNotNull">
            <summary>
            不为空
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbCompareOperator.StartWith">
            <summary>
            以xxx开始(like 'xxx%')
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbCompareOperator.EndWith">
            <summary>
            以xxx结束(like '%xxx')
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbCompareOperator.Contains">
            <summary>
            包含(like '%xxx%')
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbCompareOperator.In">
            <summary>
            在xxx中(in ('xxx1','xxx2'))
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbCompareOperator.NotIn">
            <summary>
            不在xxx中(not in ('xxx1','xxx2'))
            </summary>
        </member>
        <member name="T:BaoMen.Common.Constant.DbLogicOperator">
            <summary>
            数据库逻辑操作符
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbLogicOperator.And">
            <summary>
            and 操作
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.DbLogicOperator.Or">
            <summary>
            or 操作
            </summary>
        </member>
        <member name="T:BaoMen.Common.Constant.LogicOperator">
            <summary>
            逻辑操作
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.LogicOperator.ConditionAnd">
            <summary>
            条件与
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.LogicOperator.ConditionOr">
            <summary>
            条件或 ||
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.LogicOperator.LogicAnd">
            <summary>
            逻辑与(按位与)
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.LogicOperator.LogicOr">
            <summary>
            逻辑或(按位或) |
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.LogicOperator.LogicExclusiveOr">
            <summary>
            逻辑异或 ^
            </summary>
        </member>
        <member name="T:BaoMen.Common.Constant.SerializeType">
            <summary>
            序列号类型
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.SerializeType.Binary">
            <summary>
            byte
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.SerializeType.Json">
            <summary>
            json
            </summary>
        </member>
        <member name="F:BaoMen.Common.Constant.SerializeType.Xml">
            <summary>
            Xml
            </summary>
        </member>
        <member name="T:BaoMen.Common.Converter.DateTimeConverter">
            <summary>
            时间日期转换器
            </summary>
        </member>
        <member name="M:BaoMen.Common.Converter.DateTimeConverter.FromUnixTimeStampMillisecond(System.Int64)">
            <summary>
            将unix的时间戳转为时间日期
            </summary>
            <param name="unixTimeStamp">unix的时间戳,单位为毫秒</param>
            <returns>时间日期，如果转换失败则返回空</returns>
        </member>
        <member name="M:BaoMen.Common.Converter.DateTimeConverter.FromUnixTimeStampSecond(System.Int64)">
            <summary>
            将unix的时间戳转为时间日期
            </summary>
            <param name="unixTimeStamp">unix的时间戳，单位为秒</param>
            <returns>时间日期，如果转换失败则返回空</returns>
        </member>
        <member name="M:BaoMen.Common.Converter.DateTimeConverter.ToUnixTimeStamp(System.DateTime)">
            <summary>
            时间日期转换为unix时间戳
            </summary>
            <param name="dateTime">需要转换的时间日期</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Converter.DateTimeConverter.ToCharacter14(System.DateTime)">
            <summary>
            时间日期格式转换为yyyyMMddHHmmss的字符串
            </summary>
            <param name="dateTime">需要转换的时间日期</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Converter.DateTimeConverter.ToCharacter17(System.DateTime)">
            <summary>
            时间日期格式转换为yyyyMMddHHmmssfff的字符串
            </summary>
            <param name="dateTime">需要转换的时间日期</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Converter.DateTimeConverter.FromCharacter14(System.String)">
            <summary>
            将格式为yyyyMMddHHmmss的字符串转换为时间日期，如果转换失败返回null
            </summary>
            <param name="value">需要转换的时间日期字符串</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Converter.DateTimeConverter.FromCharacter17(System.String)">
            <summary>
            将格式为yyyyMMddHHmmssfff的字符串转换为时间日期，如果转换失败返回null
            </summary>
            <param name="value">需要转换的时间日期字符串</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Converter.DateTimeConverter.FromLongYearToSecond(System.String)">
            <summary>
            yyyy-MM-dd HH:mm:ss
            </summary>
            <param name="value">需要转换的时间日期字符串</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Data.Attribute.DatabaseEntityAttribute">
            <summary>
            实体类
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Attribute.DatabaseEntityAttribute.TableName">
            <summary>
            获取或设置数据表名称
            </summary>
        </member>
        <member name="T:BaoMen.Common.Data.Attribute.DatabaseEntityPropertyAttribute">
            <summary>
            实体类属性
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Attribute.DatabaseEntityPropertyAttribute.IsPrimaryKey">
            <summary>
            获取或设置是否是主键。
            <para>一个实体只能有一个属性将此值设置为true</para>
            <para>默认值false</para>
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Attribute.DatabaseEntityPropertyAttribute.IsRowVersion">
            <summary>
            获取或设置是否是行版本字段
            <para>一个实体只能有一个属性将此值设置为true</para>
            <para>默认值false</para>
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Attribute.DatabaseEntityPropertyAttribute.IsUnique">
            <summary>
            获取或设置是否唯一
            <para>默认值false</para>
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Attribute.DatabaseEntityPropertyAttribute.DisplayNameResource">
            <summary>
            显示时的资源名称
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Attribute.DatabaseEntityPropertyAttribute.EditNameResource">
            <summary>
            编辑时的资源名称
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Attribute.DatabaseEntityPropertyAttribute.ColumnName">
            <summary>
            获取或设置字段名
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Attribute.DatabaseEntityPropertyAttribute.ColumnDbType">
            <summary>
            获取或设置字段数据类型
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Attribute.DatabaseEntityPropertyAttribute.ColumnLength">
            <summary>
            获取或设置字段长度
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Attribute.DatabaseEntityPropertyAttribute.AllowNull">
            <summary>
            获取或设置字段是否可空
            <para>默认值false</para>
            </summary>
        </member>
        <member name="T:BaoMen.Common.Data.Attribute.DatabaseEntityFilterAttribute">
            <summary>
            数据过滤器性质
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Attribute.DatabaseEntityFilterAttribute.EntityType">
            <summary>
            获取或设置实体类型
            </summary>
        </member>
        <member name="T:BaoMen.Common.Data.Attribute.DatabaseEntityFilterPropertyAttribute">
            <summary>
            数据库过滤器属性的性质
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.Attribute.DatabaseEntityFilterPropertyAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Attribute.DatabaseEntityFilterPropertyAttribute.EntityPropertyName">
            <summary>
            获取或设置实体属性名称
            </summary>
        </member>
        <member name="T:BaoMen.Common.Data.BusinessLogicBase`4">
            <summary>
            业务逻辑
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnLogWriting">
            <summary>
            日志记录开始事件。日志记录前引发。
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnLogWrited">
            <summary>
            日志记录结束事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataSelecting">
            <summary>
            数据查询开始事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataSelectSuccess">
            <summary>
            数据查询成功事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataSelectError">
            <summary>
            数据查询失败事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataSelected">
            <summary>
            数据查询完成事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataInserting">
            <summary>
            数据插入开始事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataInsertSuccess">
            <summary>
            数据插入成功事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataInsertError">
            <summary>
            数据插入失败事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataInserted">
            <summary>
            数据插入完成事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataUpdating">
            <summary>
            数据更新开始事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataUpdateSuccess">
            <summary>
            数据更新成功事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataUpdateError">
            <summary>
            数据更新失败事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataUpdated">
            <summary>
            数据更新完成事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataDeleting">
            <summary>
            数据删除开始事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataDeleteSuccess">
            <summary>
            数据删除成功事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataDeleteError">
            <summary>
            数据删除失败事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.BusinessLogicBase`4.OnDataDeleted">
            <summary>
            数据删除完成事件
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.CheckReadPermission">
            <summary>
            检查读取权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.CheckWritePermission">
            <summary>
            检查写入权限（insert/update/delete 操作需要）
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.Process``1(BaoMen.Common.Constant.DataOperationType,System.Func{NLog.LogEventInfo,``0},System.Action{NLog.LogEventInfo},System.Func{System.Boolean})">
            <summary>
            执行操作
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="dataOperationType">数据操作类型</param>
            <param name="func">执行的方法</param>
            <param name="action">添加日志参数的方法</param>
            <param name="hasPermission">检查权限的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessSelect``1(System.Func{``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行查询操作
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">查询的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessSelect``1(System.Func{NLog.LogEventInfo,``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行查询操作
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">查询的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessSelect``1(System.Func{``0},System.Action{NLog.LogEventInfo},System.Func{System.Boolean})">
            <summary>
            执行查询操作
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">查询的方法</param>
            <param name="action">添加日志参数的方法</param>
            <param name="hasPermission">检查权限的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessSelect``1(System.Func{NLog.LogEventInfo,``0},System.Action{NLog.LogEventInfo},System.Func{System.Boolean})">
            <summary>
            执行查询操作
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">查询的方法</param>
            <param name="action">添加日志参数的方法</param>
            <param name="hasPermission">检查权限的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessInsert``1(System.Func{``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行插入操作
            </summary>
            <param name="func">插入的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessInsert``1(System.Func{NLog.LogEventInfo,``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行插入操作
            </summary>
            <param name="func">插入的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessInsert``1(System.Func{``0},System.Action{NLog.LogEventInfo},System.Func{System.Boolean})">
            <summary>
            执行插入操作
            </summary>
            <param name="func">插入的方法</param>
            <param name="action">添加日志参数的方法</param>
            <param name="hasPermission">检查权限的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessInsert``1(System.Func{NLog.LogEventInfo,``0},System.Action{NLog.LogEventInfo},System.Func{System.Boolean})">
            <summary>
            执行插入操作
            </summary>
            <param name="func">插入的方法</param>
            <param name="action">添加日志参数的方法</param>
            <param name="hasPermission">检查权限的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessUpdate``1(System.Func{``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行更新操作
            </summary>
            <param name="func">更新的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessUpdate``1(System.Func{NLog.LogEventInfo,``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行更新操作
            </summary>
            <param name="func">更新的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessUpdate``1(System.Func{``0},System.Action{NLog.LogEventInfo},System.Func{System.Boolean})">
            <summary>
            执行更新操作
            </summary>
            <param name="func">更新的方法</param>
            <param name="action">添加日志参数的方法</param>
            <param name="hasPermission">检查权限的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessUpdate``1(System.Func{NLog.LogEventInfo,``0},System.Action{NLog.LogEventInfo},System.Func{System.Boolean})">
            <summary>
            执行更新操作
            </summary>
            <param name="func">更新的方法</param>
            <param name="action">添加日志参数的方法</param>
            <param name="hasPermission">检查权限的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessDelete``1(System.Func{``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行删除操作
            </summary>
            <param name="func">删除的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessDelete``1(System.Func{NLog.LogEventInfo,``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行删除操作
            </summary>
            <param name="func">删除的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessDelete``1(System.Func{``0},System.Action{NLog.LogEventInfo},System.Func{System.Boolean})">
            <summary>
            执行删除操作
            </summary>
            <param name="func">删除的方法</param>
            <param name="action">添加日志参数的方法</param>
            <param name="hasPermission">检查权限的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessDelete``1(System.Func{NLog.LogEventInfo,``0},System.Action{NLog.LogEventInfo},System.Func{System.Boolean})">
            <summary>
            执行删除操作
            </summary>
            <param name="func">删除的方法</param>
            <param name="action">添加日志参数的方法</param>
            <param name="hasPermission">检查权限的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessWithTransaction(System.Action{System.Data.IDbTransaction},System.Boolean)">
            <summary>
            执行数据库事务操作
            </summary>
            <param name="func">要执行的方法</param>
            <param name="autoCommit">是否自动提交事务。默认值true</param>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessWithTransaction(System.Func{System.Data.IDbTransaction,System.Int32},System.Boolean)">
            <summary>
            执行数据库事务操作
            </summary>
            <param name="func">要执行的方法</param>
            <param name="autoCommit">是否自动提交事务。默认值true</param>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessWithCapTransaction(System.Func{System.Data.IDbTransaction,System.Int32},DotNetCore.CAP.ICapPublisher,System.Boolean)">
            <summary>
            执行Cap数据库事务操作
            </summary>
            <param name="func">要执行的方法</param>
            <param name="autoCommit">是否自动提交事务。默认值true</param>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.ProcessWithCapTransaction(System.Action{System.Data.IDbTransaction},DotNetCore.CAP.ICapPublisher,System.Boolean)">
            <summary>
            执行Cap数据库事务操作
            </summary>
            <param name="action">要执行的方法</param>
            <param name="autoCommit">是否自动提交事务。默认值true</param>
        </member>
        <member name="F:BaoMen.Common.Data.BusinessLogicBase`4.logger">
            <summary>
            <see cref="T:NLog.Logger"/>实例
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.BusinessLogicBase`4.dal">
            <summary>
            数据访问实例
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.BusinessLogicBase`4.type">
            <summary>
            类型实例
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造函数。返回一个BusinessLogic实例
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.CheckPageParameter(System.Int32@,System.Int32@)">
            <summary>
            检查分页参数
            </summary>
            <param name="startRowIndex">开始索引</param>
            <param name="maximumRows">最大记录数</param>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.CreateLog">
            <summary>
            创建新的LogEventInfo实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.CreateLog(System.String)">
            <summary>
            创建新的LogEventInfo实例
            </summary>
            <param name="method">方法名称</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.WriteLog(NLog.LogEventInfo)">
            <summary>
            写日志并引发事件
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.Insert(`1)">
            <summary>
            插入数据
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果在调用DoInsert方法时抛出异常，则抛出包装后的异常。</para>
            <para>如果在DataInsertedError事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="item">实体实例</param>
            <returns>成功插入的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.DoInsert(`1)">
            <summary>
            插入数据
            <para>仅内部使用。注意：如果是自增字段并且使用了缓存，一定要返回自增字段的值</para>
            </summary>
            <param name="item">实体实例</param>
            <returns>成功增加的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.Update(`1)">
            <summary>
            更新数据
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果在调用DoUpdate方法时抛出异常，则抛出包装后的异常。</para>
            <para>如果在DataUpdateError事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="item">实体实例</param>
            <returns>成功更新的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.DoUpdate(`1)">
            <summary>
            更新数据
            <para>仅内部使用。</para>
            </summary>
            <param name="item">实体实例</param>
            <returns>成功更新的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.Delete(`1)">
            <summary>
            删除数据
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果在调用方法时抛出异常，则抛出包装后的异常。</para>
            <para>如果在DataChangeFailed事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="item">实体实例</param>
            <returns>成功删除的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.DoDelete(`1)">
            <summary>
            删除数据。包含数据验证。
            <para>仅内部使用。</para>
            </summary>
            <param name="item">实体实例</param>
            <returns>成功删除的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.Get(`0)">
            <summary>
            根据实体标识获取实体实例
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果在调用DoGet方法时抛出异常，则抛出包装后的异常。</para>
            <para>如果在SelectedError事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="id">实体标识</param>
            <typeparam name="TKey">实体标识类型</typeparam>
            <returns>实体类的实例</returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.DoGet(`0)">
            <summary>
            根据实体标识获取实体实例。
            <para>仅内部使用。</para>
            </summary>
            <param name="id">实体标识</param>
            <typeparam name="TKey">实体标识类型</typeparam>
            <returns>实体类的实例</returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.GetUpdateData``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,``0,System.Boolean})">
            <summary>
            通过比较两个数组，获取需要插入，更新，删除的新数组
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="datas">新数据</param>
            <param name="existDatas">已有数据</param>
            <param name="compareKey">比较键是否相等</param>
            <param name="compareValue">比较值是否相等</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.GetList(`2,System.String,System.Int32,System.Int32)">
            <summary>
            取得实体列表
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果数据访问层查询抛出异常，则抛出包装后的异常。</para>
            <para>如果在Selected事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="filter">实体过滤器实例</param>
            <param name="sortExpression">排序表达式</param>
            <param name="startRowIndex">开始索引</param>
            <param name="maximumRows">最大记录数</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.DoGetList(`2,System.String,System.Int32,System.Int32)">
            <summary>
            取得实体列表
            <para>仅内部使用。</para>
            </summary>
            <param name="filter">过滤器实体</param>
            <param name="sortExpression">排序表达式</param>
            <param name="startRowIndex">开始索引</param>
            <param name="maximumRows">最大记录数</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.GetListCount(`2)">
            <summary>
            取得实体列表合计数量
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果数据访问层查询抛出异常，则抛出包装后的异常。</para>
            <para>如果在Selected事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="filter">实体过滤器实例</param>
            <returns>合计数量.如果在DoGetListCount过程中产生了异常并且在Selected事件中处理了异常，返回-1</returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.DoGetListCount(`2)">
            <summary>
            取得实体列表合计数量
            <para>仅内部使用。</para>
            </summary>
            <param name="filter">实体过滤器实例</param>
            <returns>合计数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.GetCountAndList(`2,System.String,System.Int32,System.Int32)">
            <summary>
            取得记录数及实体列表
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果在调用DoGetList方法时抛出异常，则抛出包装后的异常。</para>
            <para>如果在Selected事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="filter">实体过滤器实例</param>
            <param name="sortExpression">排序表达式</param>
            <param name="startRowIndex">开始索引</param>
            <param name="maximumRows">最大记录数</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.AppendExtention(`1)">
            <summary>
            添加实体的扩展属性
            </summary>
            <param name="item">实体实例</param>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicBase`4.PrepareFilter(`2)">
            <summary>
            准备过滤器
            </summary>
            <param name="filter"></param>
        </member>
        <member name="T:BaoMen.Common.Data.CacheableBusinessLogicBase`4">
            <summary>
            缓存业务逻辑
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.CacheableBusinessLogicBase`4.OnCacheRemoving">
            <summary>
            日志记录开始事件。日志记录前引发。
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.CacheableBusinessLogicBase`4.OnCacheRemoved">
            <summary>
            日志记录结束事件
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.CacheableBusinessLogicBase`4.cache">
            <summary>
            缓存管理实例
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.CacheableBusinessLogicBase`4.cacheKey">
            <summary>
            字典缓存的键
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.CacheableBusinessLogicBase`4.IdentityPropertyName">
            <summary>
            获取实体标识字段名称
            <para>默认为Id。如果不同，请覆盖此属性</para>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造函数。返回一个BusinessLogic实例
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.GetCacheKey">
            <summary>
            获取缓存的键
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.CreateKeyExpression">
            <summary>
            生成取得Key的表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.RemoveCache">
            <summary>
            清除缓存。
            </summary>
            <remarks>
            重写时一定要先调用此方法
            </remarks>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.Insert(`1)">
            <summary>
            已重写。插入数据
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果插入成功并且响应的行数大于0则清空缓存，直至下次读取数据时再次将数据读入到缓存中。反之则对缓存中的数据没有影响</para>
            <para>如果在调用DoInsert方法时抛出异常，则抛出包装后的异常。</para>
            <para>如果在DataInsertedError事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="item">实体实例</param>
            <returns>成功插入的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.Update(`1)">
            <summary>
            更新数据
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果更新成功并且响应的行数大于0则清空缓存，直至下次读取数据时再次将数据读入到缓存中。反之则对缓存中的数据没有影响</para>
            <para>如果在调用DoUpdate方法时抛出异常，则抛出包装后的异常。</para>
            <para>如果在DataUpdateError事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="item">实体实例</param>
            <returns>成功更新的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.Delete(`1)">
            <summary>
            删除数据
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果删除成功并且响应的行数大于0则清空缓存，直至下次读取数据时再次将数据读入到缓存中。反之则对缓存中的数据没有影响</para>
            <para>如果在调用方法时抛出异常，则抛出包装后的异常。</para>
            <para>如果在DataChangeFailed事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="item">实体实例</param>
            <returns>成功删除的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.DoGet(`0)">
            <summary>
            已重写。根据实例标识获取实例
            </summary>
            <param name="id">标识值</param>
            <returns>检索到的实例。若不存在返回null</returns>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.DoGetList(`2,System.String,System.Int32,System.Int32)">
            <summary>
            取得实体列表
            <para>仅内部使用。建议重载时覆盖此方法而不是公共的GetList方法</para>
            </summary>
            <param name="filter">实体过滤器实例</param>
            <param name="sortExpression">排序表达式</param>
            <param name="maximumRows">最大记录数</param>
            <param name="startRowIndex">开始索引</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.ExecuteCustomFilter(System.Collections.Generic.IEnumerable{`1},`2)">
            <summary>
            执行自定义的过滤
            </summary>
            <param name="items">实体枚举数</param>
            <param name="filter">实体过滤器</param>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.DoGetCacheData">
            <summary>
            取得缓存的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.DoGetListCount(`2)">
            <summary>
            取得实体列表合计数量
            <para>仅内部使用。</para>
            </summary>
            <param name="filter">实体过滤器实例</param>
            <returns>合计数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.AddExpression(System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            添加表达式
            <para>添加比较操作为Equl逻辑操作为ConditionAnd的表达式</para>
            </summary>
            <param name="expression">表达式</param>
            <param name="propertyExpressioin">实体属性表达式</param>
            <param name="valueExpression">值表达式</param>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.AddExpression(System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,BaoMen.Common.Constant.DbCompareOperator,BaoMen.Common.Constant.DbLogicOperator)">
            <summary>
            添加表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="propertyExpressioin">实体属性表达式</param>
            <param name="valueExpression">值表达式</param>
            <param name="compareOperator">比较操作类型</param>
            <param name="logicOperator">逻辑操作类型</param>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.CreateFilterExpression(`2)">
            <summary>
            创建过滤表达式
            <para>提供一个简单的默认实现。判断实体过滤器中所有public的属性。如果值不等于null，则提供一个默认的相等比较表达式。
            如果有多个比较表达式，则之间的关系为条件与。如果实体过滤器需要更高级的操作，请重新实现此方法</para>
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>过滤表达式</returns>
        </member>
        <member name="M:BaoMen.Common.Data.CacheableBusinessLogicBase`4.CreateSortExpression(System.String)">
            <summary>
            取得排序表达式
            </summary>
            <param name="propertyName">属性名</param>
            <returns>排序表达式</returns>
        </member>
        <member name="T:BaoMen.Common.Data.HierarchicalCacheableBusinessLogicBase`4">
            <summary>
            带缓存和过滤器的分层结构业务逻辑
            </summary>
            <typeparam name="TEntity">实体类型。必须实现IHierarchicalData接口</typeparam>
            <typeparam name="TFilter">实体过滤器类型</typeparam>
            <typeparam name="TDataAccess">数据访问类型</typeparam>
        </member>
        <member name="M:BaoMen.Common.Data.HierarchicalCacheableBusinessLogicBase`4.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.HierarchicalCacheableBusinessLogicBase`4.GetFullName(`0,System.String)">
            <summary>
            根据标识查询全名
            </summary>
            <param name="id">标识</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.HierarchicalCacheableBusinessLogicBase`4.GetChildren(`0)">
            <summary>
            根据父标识查询实体列表
            </summary>
            <param name="id">父标识</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.HierarchicalCacheableBusinessLogicBase`4.DoGetChildren(`0)">
            <summary>
            根据父标识查询实体列表
            </summary>
            <param name="id">父标识</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.HierarchicalCacheableBusinessLogicBase`4.GetAllChildren(`0)">
            <summary>
            根据父标识查询所有子实体列表
            </summary>
            <param name="id">父标识</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.HierarchicalCacheableBusinessLogicBase`4.DoGetAllChildren(`0)">
            <summary>
            根据父标识查询所有子实体列表
            </summary>
            <param name="id">父标识</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.HierarchicalCacheableBusinessLogicBase`4.AppendChildren(System.Collections.Generic.ICollection{`1},`0)">
            <summary>
            递归附加子节点
            </summary>
            <param name="items">要添加的列表</param>
            <param name="parentId">子节点</param>
        </member>
        <member name="M:BaoMen.Common.Data.HierarchicalCacheableBusinessLogicBase`4.DoDelete(`1)">
            <summary>
            重新删除的方法。检查是否有子节点，如果有抛出异常。
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Data.BusinessLogicException">
            <summary>
            业务逻辑异常类
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicException.#ctor">
            <summary>
            已重写。初始化一个<see cref="T:BaoMen.Common.Data.BusinessLogicException"/>新实例
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicException.#ctor(System.String)">
            <summary>
            已重写。使用指定错误消息初始化<see cref="T:BaoMen.Common.Data.BusinessLogicException"/>新实例
            </summary>
            <param name="message">描述当前异常的消息</param>
        </member>
        <member name="M:BaoMen.Common.Data.BusinessLogicException.#ctor(System.String,System.Exception)">
            <summary>
            已重写。使用指定错误消息和对作为此异常原因的内部异常的引用来初始化<see cref="T:BaoMen.Common.Data.BusinessLogicException"/>新实例
            </summary>
            <param name="message">描述当前异常的消息</param>
            <param name="innerException">导致当前异常的 Exception 实例</param>
        </member>
        <member name="T:BaoMen.Common.Data.CacheRemovedEventArgs">
            <summary>
            缓存移除完成事件参数
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.CacheRemovedEventArgs.CacheKey">
            <summary>
            缓存的键
            </summary>
        </member>
        <member name="T:BaoMen.Common.Data.CacheRemovingEventArgs">
            <summary>
            缓存移除事件参数
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.CacheRemovingEventArgs.Cancel">
            <summary>
            获取或设置是否取消操作
            </summary>
        </member>
        <member name="T:BaoMen.Common.Data.DapperDataAccess">
            <summary>
            Dapper数据访问基类
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.DapperDataAccess.logger">
            <summary>
            日志实例
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.DapperDataAccess.memoryCache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.DapperDataAccess.type">
            <summary>
            类型
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.CreateId">
            <summary>
            创建一个32位的ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.GetDbProviderFactory(System.String)">
            <summary>
            获取数据库提供程序工厂
            </summary>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.RemoveSqlConditionPrefix(System.Text.StringBuilder)">
            <summary>
            移除sql条件语句的前缀
            <para>前缀为" and "或者" or "</para>
            </summary>
            <param name="sb"><see cref="T:System.Text.StringBuilder"/>实例</param>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.DeriveParameters(System.Data.Common.DbCommand)">
            <summary>
            从在 DbCommand 中指定的存储过程中检索参数信息并填充指定的 Parameters 对象的 DbCommand 集合
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.GetStoredProcedureParameters(System.String,System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            获取存储过程的参数（注意：要链接数据库，高耗费资源的操作）
            </summary>
            <param name="procedureName"></param>
            <param name="dbProviderFactory"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.Process``1(BaoMen.Common.Constant.DataOperationType,System.Func{NLog.LogEventInfo,``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行操作
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="dataOperationType">数据操作类型</param>
            <param name="func">执行的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.ProcessSelect``1(System.Func{``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行查询操作
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">查询的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.ProcessSelect``1(System.Func{NLog.LogEventInfo,``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行查询操作
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">查询的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.ProcessInsert``1(System.Func{``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行插入操作
            </summary>
            <param name="func">插入的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns>响应的行数</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.ProcessInsert``1(System.Func{NLog.LogEventInfo,``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行插入操作
            </summary>
            <param name="func">插入的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns>响应的行数</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.ProcessUpdate``1(System.Func{``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行更新操作
            </summary>
            <param name="func">更新的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns>响应的行数</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.ProcessUpdate``1(System.Func{NLog.LogEventInfo,``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行更新操作
            </summary>
            <param name="func">更新的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns>响应的行数</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.ProcessDelete``1(System.Func{``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行删除操作
            </summary>
            <param name="func">删除的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns>响应的行数</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess.ProcessDelete``1(System.Func{NLog.LogEventInfo,``0},System.Action{NLog.LogEventInfo})">
            <summary>
            执行删除操作
            </summary>
            <param name="func">删除的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns>响应的行数</returns>
        </member>
        <member name="T:BaoMen.Common.Data.DapperDataAccess`3">
            <summary>
            数据访问基类
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.DapperDataAccess`3.TableName">
            <summary>
            数据库表名称
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.DapperDataAccess`3.dbProviderFactory">
            <summary>
            数据库的Provider工厂实例
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.DapperDataAccess`3.connectionString">
            <summary>
            数据库链接串
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.CreateConnection">
            <summary>
            创建默认的数据库链接
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.GetStoredProcedureParameters(System.String,System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            获取存储过程的参数（注意：要链接数据库，高耗费资源的操作）
            </summary>
            <param name="procedureName"></param>
            <param name="dbProviderFactory"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.AddParameter``1(System.String,System.String,BaoMen.Common.Model.FilterProperty{``0},Dapper.DynamicParameters)">
            <summary>
            添加参数
            </summary>
            <param name="columnName">字段名称</param>
            <param name="propertyName">参数名称</param>
            <param name="filterProperty">过滤器属性实例</param>
            <param name="parameters">参数</param>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.AddParameter``1(System.Text.StringBuilder,System.String,System.String,BaoMen.Common.Model.FilterProperty{``0},Dapper.DynamicParameters)">
            <summary>
            添加参数
            </summary>
            <param name="stringBuilder"><see cref="T:System.Text.StringBuilder"/>实例</param>
            <param name="columnName">字段名称</param>
            <param name="propertyName">参数名称</param>
            <param name="filterProperty">过滤器属性实例</param>
            <param name="parameters">参数</param>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">数据库提供程序名称</param>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.Insert(`1,System.Data.IDbTransaction)">
            <summary>
            插入数据
            </summary>
            <param name="item">实体实例</param>
            <param name="transaction">数据库事务</param>
            <returns>成功增加的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.DoInsert(`1,System.Data.IDbTransaction,System.Action{System.Data.IDbConnection,System.Data.IDbTransaction})">
            <summary>
            插入数据
            </summary>
            <param name="item">实体实例</param>
            <param name="transaction">数据库事务</param>
            <param name="getIdentity">获取插入的自增ID的委托</param>
            <returns>成功增加的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.CreateInsertCommand(`1)">
            <summary>
            取得插入数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.Update(`1,System.Data.IDbTransaction)">
            <summary>
            更新数据
            </summary>
            <param name="item">实体实例</param>
            <param name="transaction">数据库事务</param>
            <returns>成功更新的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.DoUpdate(`1,System.Data.IDbTransaction)">
            <summary>
            更新数据
            </summary>
            <param name="item">实体实例</param>
            <param name="transaction">数据库事务</param>
            <returns>成功更新的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.CreateUpdateCommand(`1)">
            <summary>
            取得更新数据的数据库命令
            </summary>
            <param name="item">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.Delete(`1,System.Data.IDbTransaction)">
            <summary>
            删除数据
            </summary>
            <param name="item">实体实例</param>
            <param name="transaction">数据库事务实例</param>
            <returns>成功删除的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.DoDelete(`1,System.Data.IDbTransaction)">
            <summary>
            删除数据
            </summary>
            <param name="item">实体实例</param>
            <param name="transaction">数据库事务</param>
            <returns>成功删除的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.CreateDeleteCommand(`1)">
            <summary>
            取得删除数据的数据库命令
            </summary>
            <param name="item">实体实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.Get(`0,System.Data.IDbTransaction)">
            <summary>
            根据实体标识获取实体实例
            </summary>
            <typeparam name="TKey">实体标识类型</typeparam>
            <param name="id">实体标识</param>
            <param name="transaction">数据库事务</param>
            <returns>实体类的实例</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.DoGet(`0,System.Data.IDbTransaction)">
            <summary>
            根据实体标识获取实体实例
            </summary>
            <param name="id">实体标识</param>
            <param name="transaction">数据库事务</param>
            <returns>实体类的实例</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.CreateGetCommand(`0)">
            <summary>
            创建读取单条数据的数据库命令
            </summary>
            <param name="id">实体标识</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.GetList(`2,System.String,System.Int32,System.Int32,System.Data.IDbTransaction)">
            <summary>
            取得实体列表
            </summary>
            <param name="filter">实体过滤器实例</param>
            <param name="sortExpression">排序表达式</param>
            <param name="startRowIndex">开始索引</param>
            <param name="maximumRows">页大小</param>
            <param name="transaction">数据库事务</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.DoGetList(`2,System.String,System.Int32,System.Int32,System.Data.IDbTransaction)">
            <summary>
            取得实体列表
            </summary>
            <param name="filter">实体过滤器实例</param>
            <param name="sortExpression">排序表达式</param>
            <param name="startRowIndex">开始索引</param>
            <param name="maximumRows">页大小</param>
            <param name="transaction">数据库事务</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.CreateGetListCommand(`2,System.String)">
            <summary>
            创建读取多条数据的数据库命令
            </summary>
            <param name="filter">实体过滤器实例</param>
            <param name="sortExpression">排序表达式</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.GetListCount(`2)">
            <summary>
            取得实体列表合计数量
            </summary>
            <param name="filter">实体过滤器实例</param>
            <returns>合计数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.DoGetListCount(`2)">
            <summary>
            取得实体列表合计数量
            </summary>
            <param name="filter">实体过滤器实例</param>
            <returns>合计数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccess`3.CreateFilterSqlWhere(`2)">
            <summary>
            创建过滤器的sql语句及参数
            </summary>
            <param name="filter">过滤器实例</param>
            <returns>where条件及参数</returns>
        </member>
        <member name="T:BaoMen.Common.Data.DapperDataAccessAsync`3">
            <summary>
            异步数据访问基类
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccessAsync`3.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接串</param>
            <param name="providerName">提供程序名称</param>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccessAsync`3.ProcessAsync``1(BaoMen.Common.Constant.DataOperationType,System.Func{System.Threading.Tasks.Task{``0}},System.Action{NLog.LogEventInfo})">
            <summary>
            异步执行操作
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="dataOperationType">数据操作类型</param>
            <param name="func">执行的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccessAsync`3.ProcessSelectAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Action{NLog.LogEventInfo})">
            <summary>
            异步执行查询操作
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">查询的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccessAsync`3.ProcessInsertAsync(System.Func{System.Threading.Tasks.Task{System.Int32}},System.Action{NLog.LogEventInfo})">
            <summary>
            异步执行插入操作
            </summary>
            <param name="func">插入的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns>响应的行数</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccessAsync`3.ProcessUpdateAsync(System.Func{System.Threading.Tasks.Task{System.Int32}},System.Action{NLog.LogEventInfo})">
            <summary>
            异步执行更新操作
            </summary>
            <param name="func">更新的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns>响应的行数</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DapperDataAccessAsync`3.ProcessDelete(System.Func{System.Threading.Tasks.Task{System.Int32}},System.Action{NLog.LogEventInfo})">
            <summary>
            异步执行删除操作
            </summary>
            <param name="func">删除的方法</param>
            <param name="action">添加日志参数的方法</param>
            <returns>响应的行数</returns>
        </member>
        <member name="T:BaoMen.Common.Data.DataAccessException">
            <summary>
            数据访问层异常类
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.DataAccessException.#ctor">
            <summary>
            已重写。初始化一个<see cref="T:BaoMen.Common.Data.DataAccessException"/>新实例
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.DataAccessException.#ctor(System.String)">
            <summary>
            已重写。使用指定错误消息初始化<see cref="T:BaoMen.Common.Data.DataAccessException"/>新实例
            </summary>
            <param name="message">描述当前异常的消息</param>
        </member>
        <member name="M:BaoMen.Common.Data.DataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            已重写。使用指定错误消息和对作为此异常原因的内部异常的引用来初始化<see cref="T:BaoMen.Common.Data.DataAccessException"/>新实例
            </summary>
            <param name="message">异常信息</param>
            <param name="innerException">导致当前异常的 Exception 实例</param>
        </member>
        <member name="T:BaoMen.Common.Data.DataAccessFactory">
            <summary>
            泛型数据访问层工厂
            </summary>
            <typeparam name="T">数据访问基类。要求必须有默认的构造函数。</typeparam>
        </member>
        <member name="M:BaoMen.Common.Data.DataAccessFactory.Create``3(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            创建一个数据访问层实例
            </summary>
            <returns>数据访问层实例</returns>
        </member>
        <member name="M:BaoMen.Common.Data.DataAccessFactory.CreateRedis``1(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            创建一个数据访问层实例
            </summary>
            <returns>数据访问层实例</returns>
        </member>
        <member name="T:BaoMen.Common.Data.DataOperationEventArgs">
            <summary>
            数据操作的事件数据的基类
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.DataOperationEventArgs.DataOperationType">
            <summary>
            获取数据操作类型
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.DataOperationEventArgs.#ctor(BaoMen.Common.Constant.DataOperationType)">
            <summary>
            构造函数
            </summary>
            <param name="dataOperationType"><see cref="P:BaoMen.Common.Data.DataOperationEventArgs.DataOperationType"/>实例</param>
        </member>
        <member name="T:BaoMen.Common.Data.DataOperatingEventArgs">
            <summary>
            数据操作开始的事件数据
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.DataOperatingEventArgs.Cancel">
            <summary>
            获取或设置是否取消操作
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.DataOperatingEventArgs.#ctor(BaoMen.Common.Constant.DataOperationType)">
            <summary>
            构造函数
            </summary>
            <param name="dataOperationType"><see cref="T:BaoMen.Common.Constant.DataOperationType"/>实例</param>
        </member>
        <member name="T:BaoMen.Common.Data.DataOperateSuccessEventArgs">
            <summary>
            数据操作成功的事件数据
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.DataOperateSuccessEventArgs.ReturnValue">
            <summary>
            获取返回值
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.DataOperateSuccessEventArgs.#ctor(BaoMen.Common.Constant.DataOperationType,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="returnValue">返回值</param>
            <param name="dataOperationType"><see cref="T:BaoMen.Common.Constant.DataOperationType"/>实例</param>
        </member>
        <member name="T:BaoMen.Common.Data.DataOperateErrorEventArgs">
            <summary>
            数据操作失败的事件数据
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.DataOperateErrorEventArgs.Handled">
            <summary>
            获取或设置是否处理异常
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.DataOperateErrorEventArgs.Exception">
            <summary>
            获取异常
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.DataOperateErrorEventArgs.#ctor(BaoMen.Common.Constant.DataOperationType,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="dataOperationType"><see cref="T:BaoMen.Common.Constant.DataOperationType"/>实例</param>
            <param name="exception">异常实例</param>
        </member>
        <member name="T:BaoMen.Common.Data.DataOperatedEventArgs">
            <summary>
            数据操作完成的事件数据
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.DataOperatedEventArgs.#ctor(BaoMen.Common.Constant.DataOperationType)">
            <summary>
            构造函数
            </summary>
            <param name="dataOperationType"><see cref="T:BaoMen.Common.Constant.DataOperationType"/>实例</param>
        </member>
        <member name="T:BaoMen.Common.Data.Helper.DatabaseEntityFilterHelper">
            <summary>
            数据库实例过滤器帮助类
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.Helper.DatabaseEntityFilterHelper.filterType">
            <summary>
            过滤器类型
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.Helper.DatabaseEntityFilterHelper.entityHelper">
            <summary>
            实体帮助类
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.Helper.DatabaseEntityFilterHelper.databaseEntityFilterAttribute">
            <summary>
            过滤器特性
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.Helper.DatabaseEntityFilterHelper.propertyAttributeDict">
            <summary>
            过滤器属性的特性字典
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.Helper.DatabaseEntityFilterHelper.propertyInfoDict">
            <summary>
            过滤器属性信息字典
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.Helper.DatabaseEntityFilterHelper.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="filterType">过滤器类型</param>
            <exception cref="T:System.ArgumentNullException">实体类型为空时产生</exception>
            <exception cref="T:System.ArgumentException">实体类型未标记为<see cref="T:BaoMen.Common.Data.Attribute.DatabaseEntityAttribute"/>性质时产生</exception>
        </member>
        <member name="P:BaoMen.Common.Data.Helper.DatabaseEntityFilterHelper.FilterType">
            <summary>
            获取过滤器类型
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Helper.DatabaseEntityFilterHelper.DatabaseEntityFilterAttribute">
            <summary>
            获取过滤器特性
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Helper.DatabaseEntityFilterHelper.PropertyAttributeDict">
            <summary>
            获取属性字典
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Helper.DatabaseEntityFilterHelper.PropertyInfoDict">
            <summary>
            获取过滤器属性信息字典
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Helper.DatabaseEntityFilterHelper.EntityHelper">
            <summary>
            获取实体帮助类
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.Helper.DatabaseEntityFilterHelper.GetPropertyTypeCode(System.String)">
            <summary>
            取得指定属性的类型
            </summary>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Data.Helper.DatabaseEntityHelper">
            <summary>
            数据库实体帮助类
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.Helper.DatabaseEntityHelper.entityType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.Helper.DatabaseEntityHelper.databaseEntityAttribute">
            <summary>
            实体特性
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.Helper.DatabaseEntityHelper.propertyAttributeDict">
            <summary>
            实体属性的特性字典
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.Helper.DatabaseEntityHelper.propertyInfoDict">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.Helper.DatabaseEntityHelper.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="entityType">实体类型。实体必须是标记了<see cref="P:BaoMen.Common.Data.Helper.DatabaseEntityHelper.DatabaseEntityAttribute"/>性质的类型</param>
            <exception cref="T:System.ArgumentNullException">实体类型为空时产生</exception>
            <exception cref="T:System.ArgumentException">实体类型未标记为<see cref="P:BaoMen.Common.Data.Helper.DatabaseEntityHelper.DatabaseEntityAttribute"/>性质时产生</exception>
        </member>
        <member name="P:BaoMen.Common.Data.Helper.DatabaseEntityHelper.EntityType">
            <summary>
            获取实体类型
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Helper.DatabaseEntityHelper.DatabaseEntityAttribute">
            <summary>
            获取实体特性
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Helper.DatabaseEntityHelper.PropertyAttributeDict">
            <summary>
            获取实体属性的<see cref="T:BaoMen.Common.Data.Attribute.DatabaseEntityPropertyAttribute"/>特性字典
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.Helper.DatabaseEntityHelper.PropertyInfoDict">
            <summary>
            获取实体的属性信息
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.Helper.DatabaseEntityHelper.GetIdentityPropertyName">
            <summary>
            取得实体类标识（第一个主键）属性名称
            </summary>
            <returns>如果没有取到返回null</returns>
        </member>
        <member name="M:BaoMen.Common.Data.Helper.DatabaseEntityHelper.GetRowVersionPropertyName">
            <summary>
            取得实体类行版本（第一个）属性名称
            </summary>
            <returns>如果没有取到返回null</returns>
        </member>
        <member name="M:BaoMen.Common.Data.Helper.DatabaseEntityHelper.GetColumnNames(System.Boolean,System.Boolean)">
            <summary>
            取得数据库字段名称
            </summary>
            <param name="includeIdentityColumn">是否包含标识字段</param>
            <param name="includeTableName">是否包含表名</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.Helper.DatabaseEntityHelper.GetPropertyTypeCode(System.String)">
            <summary>
            取得指定属性的类型
            </summary>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.Helper.DatabaseEntityHelper.GetAssemblyName">
            <summary>
            取得实体程序集的简单名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Data.Helper.ExpressionHelper">
            <summary>
            表达式帮助类
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.Helper.ExpressionHelper.CreateCompareExpression(BaoMen.Common.Constant.DbCompareOperator,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建比较运算表达式
            </summary>
            <param name="compareOperator">比较操作</param>
            <param name="leftExpression">一个表示左操作数的 Expression</param>
            <param name="rightExpression">一个表示右操作数的 Expression</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.Helper.ExpressionHelper.CreateLogicExpression(BaoMen.Common.Constant.LogicOperator,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建逻辑运算表达式
            </summary>
            <param name="logicOpertor">逻辑操作</param>
            <param name="leftExpression">一个表示左操作数的 Expression</param>
            <param name="rightExpression">一个表示右操作数的 Expression</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.Helper.ExpressionHelper.ConvertCompareOperator(BaoMen.Common.Constant.DbCompareOperator)">
            <summary>
            转换CompareOperator到ExpressionType
            </summary>
            <param name="compareOperator">一个CompareOperator</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.Helper.ExpressionHelper.CovertLogicOperator(BaoMen.Common.Constant.LogicOperator)">
            <summary>
            转换LogicOperator到ExpressionType
            </summary>
            <param name="logicOperator">一个LogicOperator</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.Helper.ExpressionHelper.CovertDbLogicOperator(BaoMen.Common.Constant.DbLogicOperator)">
            <summary>
            转换DbLogicOperator到ExpressionType
            </summary>
            <param name="dbLogicOperator">一个LogicOperator</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Data.IBusinessLogic">
            <summary>
            业务逻辑接口
            </summary>
        </member>
        <member name="T:BaoMen.Common.Data.IBusinessLogic`2">
            <summary>
            带过滤器的业务逻辑
            </summary>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataSelecting">
            <summary>
            数据查询开始事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataSelectSuccess">
            <summary>
            数据查询成功事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataSelectError">
            <summary>
            数据查询失败事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataSelected">
            <summary>
            数据查询完成事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataInserting">
            <summary>
            数据插入开始事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataInsertSuccess">
            <summary>
            数据插入成功事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataInsertError">
            <summary>
            数据插入失败事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataInserted">
            <summary>
            数据插入完成事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataUpdating">
            <summary>
            数据更新开始事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataUpdateSuccess">
            <summary>
            数据更新成功事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataUpdateError">
            <summary>
            数据更新失败事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataUpdated">
            <summary>
            数据更新完成事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataDeleting">
            <summary>
            数据删除开始事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataDeleteSuccess">
            <summary>
            数据删除成功事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataDeleteError">
            <summary>
            数据删除失败事件
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.IBusinessLogic`2.OnDataDeleted">
            <summary>
            数据删除完成事件
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.IBusinessLogic`2.Insert(`1)">
            <summary>
            插入数据
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果在调用DoInsert方法时抛出异常，则抛出包装后的异常。</para>
            <para>如果在DataInsertedError事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="item">实体实例</param>
            <returns>成功插入的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.IBusinessLogic`2.Update(`1)">
            <summary>
            更新数据
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果在调用DoUpdate方法时抛出异常，则抛出包装后的异常。</para>
            <para>如果在DataUpdateError事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="item">实体实例</param>
            <returns>成功更新的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.IBusinessLogic`2.Delete(`1)">
            <summary>
            删除数据
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果在调用方法时抛出异常，则抛出包装后的异常。</para>
            <para>如果在DataChangeFailed事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="item">实体标识</param>
            <returns>成功删除的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.IBusinessLogic`2.Get(`0)">
            <summary>
            根据实体标识获取实体实例
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果在调用DoGet方法时抛出异常，则抛出包装后的异常。</para>
            <para>如果在SelectedError事件中处理了异常，则不抛出异常</para>
            </exception>
            <typeparam name="T">实体标识类型</typeparam>
            <param name="id">实体标识</param>
            <returns>实体类的实例</returns>
        </member>
        <member name="T:BaoMen.Common.Data.IBusinessLogic`3">
            <summary>
            带过滤器的业务逻辑
            </summary>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TFilter">实体过滤器类型</typeparam>
        </member>
        <member name="M:BaoMen.Common.Data.IBusinessLogic`3.GetList(`2,System.String,System.Int32,System.Int32)">
            <summary>
            取得实体列表
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果数据访问层查询抛出异常，则抛出包装后的异常。</para>
            <para>如果在Selected事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="filter">实体过滤器实例</param>
            <param name="sortExpression">排序表达式</param>
            <param name="startRowIndex">开始索引</param>
            <param name="maximumRows">最大记录数</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:BaoMen.Common.Data.IBusinessLogic`3.GetListCount(`2)">
            <summary>
            取得实体列表合计数量
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果数据访问层查询抛出异常，则抛出包装后的异常。</para>
            <para>如果在Selected事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="filter">实体过滤器实例</param>
            <returns>合计数量.如果在DoGetListCount过程中产生了异常并且在Selected事件中处理了异常，返回-1</returns>
        </member>
        <member name="M:BaoMen.Common.Data.IBusinessLogic`3.GetCountAndList(`2,System.String,System.Int32,System.Int32)">
            <summary>
            取得记录数及实体列表
            </summary>
            <exception cref="T:BaoMen.Common.Data.BusinessLogicException">
            <para>如果数据访问层查询抛出异常，则抛出包装后的异常。</para>
            <para>如果在Selected事件中处理了异常，则不抛出异常</para>
            </exception>
            <param name="filter">实体过滤器实例</param>
            <param name="sortExpression">排序表达式</param>
            <param name="startRowIndex">开始索引</param>
            <param name="maximumRows">最大记录数</param>
            <returns>实体列表</returns>
        </member>
        <member name="T:BaoMen.Common.Data.ICacheableBusinessLogic`3">
            <summary>
            缓存业务逻辑接口
            </summary>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TFilter">实体过滤器类型</typeparam>
        </member>
        <member name="E:BaoMen.Common.Data.ICacheableBusinessLogic`3.OnCacheRemoving">
            <summary>
            日志记录开始事件。日志记录前引发。
            </summary>
        </member>
        <member name="E:BaoMen.Common.Data.ICacheableBusinessLogic`3.OnCacheRemoved">
            <summary>
            日志记录结束事件
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.ICacheableBusinessLogic`3.RemoveCache">
            <summary>
            移除缓存
            </summary>
        </member>
        <member name="T:BaoMen.Common.Data.IDataAccess">
            <summary>
            数据访问接口
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.IDataAccess.CreateConnection">
            <summary>
            创建数据库链接
            </summary>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Data.IDataAccess`1">
            <summary>
            数据访问接口
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.IDataAccess`1.Insert(`0,System.Data.IDbTransaction)">
            <summary>
            插入数据
            </summary>
            <param name="item">实体实例</param>
            <param name="transaction">数据库事务</param>
            <returns>成功增加的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.IDataAccess`1.Update(`0,System.Data.IDbTransaction)">
            <summary>
            更新数据
            </summary>
            <param name="item">实体实例</param>
            <param name="transaction">数据库事务</param>
            <returns>成功更新的数量</returns>
        </member>
        <member name="M:BaoMen.Common.Data.IDataAccess`1.Delete(`0,System.Data.IDbTransaction)">
            <summary>
            删除数据
            </summary>
            <param name="item">实体实例</param>
            <param name="transaction">数据库事务实例</param>
            <returns>成功删除的数量</returns>
        </member>
        <member name="T:BaoMen.Common.Data.IDataAccess`3">
            <summary>
            数据访问接口
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.IDataAccess`3.Get(`0,System.Data.IDbTransaction)">
            <summary>
            根据实体标识获取实体实例
            </summary>
            <typeparam name="TKey">实体标识类型</typeparam>
            <param name="id">实体标识</param>
            <param name="transaction">数据库事务</param>
            <returns>实体类的实例</returns>
        </member>
        <member name="M:BaoMen.Common.Data.IDataAccess`3.GetList(`2,System.String,System.Int32,System.Int32,System.Data.IDbTransaction)">
            <summary>
            取得实体列表
            </summary>
            <param name="filter">实体过滤器实例</param>
            <param name="sortExpression">排序表达式</param>
            <param name="startRowIndex">开始索引</param>
            <param name="maximumRows">页大小</param>
            <param name="transaction">数据库事务</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:BaoMen.Common.Data.IDataAccess`3.GetListCount(`2)">
            <summary>
            取得实体列表合计数量
            </summary>
            <param name="filter">实体过滤器实例</param>
            <returns>合计数量</returns>
        </member>
        <member name="T:BaoMen.Common.Data.IHierarchicalBusinessLogic`3">
            <summary>
            带过滤器的分层业务逻辑
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TFilter">实体过滤器类型</typeparam>
        </member>
        <member name="M:BaoMen.Common.Data.IHierarchicalBusinessLogic`3.GetFullName(`0,System.String)">
            <summary>
            根据标识查询全名
            </summary>
            <param name="id">标识</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.IHierarchicalBusinessLogic`3.GetAllChildren(`0)">
            <summary>
            根据父标识查询实体列表
            </summary>
            <param name="id">父标识</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.IHierarchicalBusinessLogic`3.GetChildren(`0)">
            <summary>
            根据父标识查询所有子实体列表
            </summary>
            <param name="id">父标识</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Data.LogEventArgs">
            <summary>
            日志事件参数
            </summary>
        </member>
        <member name="P:BaoMen.Common.Data.LogEventArgs.LogEventInfo">
            <summary>
            LogEventInfo
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.LogEventArgs.#ctor(NLog.LogEventInfo)">
            <summary>
            构造函数
            </summary>
            <param name="logEventInfo">LogEventInfo实例</param>
        </member>
        <member name="T:BaoMen.Common.Data.NoneRowModifiedException">
            <summary>
            更新或删除数据时未更改任何行异常类
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.NoneRowModifiedException.#ctor">
            <summary>
            已重写。初始化一个<see cref="T:BaoMen.Common.Data.NoneRowModifiedException"/>新实例
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.NoneRowModifiedException.#ctor(System.String)">
            <summary>
            已重写。使用指定错误消息初始化<see cref="T:BaoMen.Common.Data.NoneRowModifiedException"/>新实例
            </summary>
            <param name="message">描述当前异常的消息</param>
        </member>
        <member name="M:BaoMen.Common.Data.NoneRowModifiedException.#ctor(System.String,System.Exception)">
            <summary>
            已重写。使用指定错误消息和对作为此异常原因的内部异常的引用来初始化<see cref="T:BaoMen.Common.Data.NoneRowModifiedException"/>新实例
            </summary>
            <param name="message">异常信息</param>
            <param name="innerException">导致当前异常的 Exception 实例</param>
        </member>
        <member name="T:BaoMen.Common.Data.RedisDataAccess`2">
            <summary>
            访问Redis的数据访问基类
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.RedisDataAccess`2.connectionString">
            <summary>
            Redis连接串
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.RedisDataAccess`2.keySeparator">
            <summary>
            Redis Key分隔符
            </summary>
        </member>
        <member name="F:BaoMen.Common.Data.RedisDataAccess`2.connectionMultiplexer">
            <summary>
            redis链接
            </summary>
        </member>
        <member name="M:BaoMen.Common.Data.RedisDataAccess`2.#ctor(System.String)">
            <summary>
            默认构造函数
            </summary>
            <param name="connectionString">Redis连接串</param>
        </member>
        <member name="M:BaoMen.Common.Data.RedisDataAccess`2.GetRedisKey(`0)">
            <summary>
            根据标识符获取Redis Key
            </summary>
            <param name="id">标识符</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.RedisDataAccess`2.Deserialize(StackExchange.Redis.RedisValue,BaoMen.Common.Constant.SerializeType)">
            <summary>
            反序列化
            </summary>
            <param name="value">Redis的值</param>
            <param name="serializeType">序列化类型</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.RedisDataAccess`2.Serialize(`1,BaoMen.Common.Constant.SerializeType)">
            <summary>
            序列化
            </summary>
            <param name="value">值</param>
            <param name="serializeType">序列化类型</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.RedisDataAccess`2.Get(`0,BaoMen.Common.Constant.SerializeType,System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="id"></param>
            <param name="serializeType">序列化类型</param>
            <param name="databaseIndex">数据库索引</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.RedisDataAccess`2.Set(`0,`1,System.Nullable{System.TimeSpan},BaoMen.Common.Constant.SerializeType,System.Int32)">
            <summary>
            设置数据
            </summary>
            <param name="id">标识</param>
            <param name="value">值</param>
            <param name="serializeType">序列化类型</param>
            <param name="databaseIndex">数据库索引</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.RedisDataAccess`2.GetList(System.Collections.Generic.IEnumerable{`0},BaoMen.Common.Constant.SerializeType,System.Int32)">
            <summary>
            获取数据列表
            </summary>
            <param name="ids">标识</param>
            <param name="serializeType">序列号类型</param>
            <param name="databaseIndex">数据库索引</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.RedisDataAccess`2.GetList(System.Collections.Generic.IEnumerable{StackExchange.Redis.RedisKey},BaoMen.Common.Constant.SerializeType,System.Int32)">
            <summary>
            获取数据列表
            </summary>
            <param name="keys">RedisKeys</param>
            <param name="serializeType">序列号类型</param>
            <param name="databaseIndex">数据库索引</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.RedisDataAccess`2.Delete(`0,System.Int32)">
            <summary>
            删除数据
            </summary>
            <param name="id">标识</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Data.RedisDataAccess`2.GetKeys(System.Int32,StackExchange.Redis.RedisValue,System.Int32,System.Int64,System.Int32,StackExchange.Redis.CommandFlags)">
            <summary>
            获取Keys
            </summary>
            <param name="database"></param>
            <param name="pattern"></param>
            <param name="pageSize"></param>
            <param name="cursor"></param>
            <param name="pageOffset"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Extension.Base32">
            <summary>
            Class representing a Base32 number.  Based on Douglas Crockford"s Base32: http://www.crockford.com/wrmg/base32.html
            </summary>
        </member>
        <member name="F:BaoMen.Common.Extension.Base32.MaxValue">
            <summary>
            Base32 containing the maximum supported value for this type
            </summary>
        </member>
        <member name="F:BaoMen.Common.Extension.Base32.MinValue">
            <summary>
            Base32 containing the minimum supported value for this type
            </summary>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.#ctor(System.Int64)">
            <summary>
            Instantiate a Base32 number from a long value
            </summary>
            <param name="NumericValue">The long value to give to the Base32 number</param>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.#ctor(System.String)">
            <summary>
            Instantiate a Base32 number from a Base32 string
            </summary>
            <param name="Value">The value to give to the Base32 number</param>
        </member>
        <member name="P:BaoMen.Common.Extension.Base32.NumericValue">
            <summary>
            Get or set the value of the type using a base-10 long integer
            </summary>
        </member>
        <member name="P:BaoMen.Common.Extension.Base32.Value">
            <summary>
            Get or set the value of the type using a Base32 string
            </summary>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.ToNumber(System.String)">
            <summary>
            Static method to convert a Base32 string to a long integer (base-10)
            </summary>
            <param name="base32Value">The number to convert from</param>
            <returns>The long integer</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.ToBase32(System.Int64)">
            <summary>
            Public static method to convert a long integer (base-10) to a Base32 number
            </summary>
            <param name="NumericValue">The base-10 long integer</param>
            <returns>A Base32 representation</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_GreaterThan(BaoMen.Common.Extension.Base32,BaoMen.Common.Extension.Base32)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_LessThan(BaoMen.Common.Extension.Base32,BaoMen.Common.Extension.Base32)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_GreaterThanOrEqual(BaoMen.Common.Extension.Base32,BaoMen.Common.Extension.Base32)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_LessThanOrEqual(BaoMen.Common.Extension.Base32,BaoMen.Common.Extension.Base32)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Equality(BaoMen.Common.Extension.Base32,BaoMen.Common.Extension.Base32)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Inequality(BaoMen.Common.Extension.Base32,BaoMen.Common.Extension.Base32)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Addition(BaoMen.Common.Extension.Base32,BaoMen.Common.Extension.Base32)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Subtraction(BaoMen.Common.Extension.Base32,BaoMen.Common.Extension.Base32)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Increment(BaoMen.Common.Extension.Base32)">
            <summary>
            Operator overload
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Decrement(BaoMen.Common.Extension.Base32)">
            <summary>
            Operator overload
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Multiply(BaoMen.Common.Extension.Base32,BaoMen.Common.Extension.Base32)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Division(BaoMen.Common.Extension.Base32,BaoMen.Common.Extension.Base32)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Modulus(BaoMen.Common.Extension.Base32,BaoMen.Common.Extension.Base32)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Implicit(BaoMen.Common.Extension.Base32)~System.Int64">
            <summary>
            Converts type Base32 to a base-10 long
            </summary>
            <param name="Value">The Base32 object</param>
            <returns>The base-10 long integer</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Implicit(BaoMen.Common.Extension.Base32)~System.Int32">
            <summary>
            Converts type Base32 to a base-10 integer
            </summary>
            <param name="Value">The Base32 object</param>
            <returns>The base-10 integer</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Implicit(BaoMen.Common.Extension.Base32)~System.Int16">
            <summary>
            Converts type Base32 to a base-10 short
            </summary>
            <param name="Value">The Base32 object</param>
            <returns>The base-10 short</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Implicit(System.Int64)~BaoMen.Common.Extension.Base32">
            <summary>
            Converts a long (base-10) to a Base32 type
            </summary>
            <param name="Value">The long to convert</param>
            <returns>The Base32 object</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Explicit(BaoMen.Common.Extension.Base32)~System.String">
            <summary>
            Converts type Base32 to a string; must be explicit, since
            Base32 > string is dangerous!
            </summary>
            <param name="Value">The Base32 type</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.op_Implicit(System.String)~BaoMen.Common.Extension.Base32">
            <summary>
            Converts a string to a Base32
            </summary>
            <param name="Value">The string (must be a Base32 string)</param>
            <returns>A Base32 type</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.ToString">
            <summary>
            Returns a string representation of the Base32 number
            </summary>
            <returns>A string representation</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.GetHashCode">
            <summary>
            A unique value representing the value of the number
            </summary>
            <returns>The unique number</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.Equals(System.Object)">
            <summary>
            Determines if an object has the same value as the instance
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the values are the same</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base32.ToString(System.Int32)">
            <summary>
            Returns a string representation padding the leading edge with
            zeros if necessary to make up the number of characters
            </summary>
            <param name="MinimumDigits">The minimum number of digits that the string must contain</param>
            <returns>The padded string representation</returns>
        </member>
        <member name="T:BaoMen.Common.Extension.Base36">
            <summary>
            Class representing a Base36 number
            </summary>
        </member>
        <member name="F:BaoMen.Common.Extension.Base36.MaxValue">
            <summary>
            Base36 containing the maximum supported value for this type
            </summary>
        </member>
        <member name="F:BaoMen.Common.Extension.Base36.MinValue">
            <summary>
            Base36 containing the minimum supported value for this type
            </summary>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.#ctor(System.Int64)">
            <summary>
            Instantiate a Base36 number from a long value
            </summary>
            <param name="NumericValue">The long value to give to the Base36 number</param>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.#ctor(System.String)">
            <summary>
            Instantiate a Base36 number from a Base36 string
            </summary>
            <param name="Value">The value to give to the Base36 number</param>
        </member>
        <member name="P:BaoMen.Common.Extension.Base36.NumericValue">
            <summary>
            Get or set the value of the type using a base-10 long integer
            </summary>
        </member>
        <member name="P:BaoMen.Common.Extension.Base36.Value">
            <summary>
            Get or set the value of the type using a Base36 string
            </summary>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.Base36ToNumber(System.String)">
            <summary>
            Static method to convert a Base36 string to a long integer (base-10)
            </summary>
            <param name="Base36Value">The number to convert from</param>
            <returns>The long integer</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.NumberToBase36(System.Int64)">
            <summary>
            Public static method to convert a long integer (base-10) to a Base36 number
            </summary>
            <param name="NumericValue">The base-10 long integer</param>
            <returns>A Base36 representation</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_GreaterThan(BaoMen.Common.Extension.Base36,BaoMen.Common.Extension.Base36)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_LessThan(BaoMen.Common.Extension.Base36,BaoMen.Common.Extension.Base36)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_GreaterThanOrEqual(BaoMen.Common.Extension.Base36,BaoMen.Common.Extension.Base36)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_LessThanOrEqual(BaoMen.Common.Extension.Base36,BaoMen.Common.Extension.Base36)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Equality(BaoMen.Common.Extension.Base36,BaoMen.Common.Extension.Base36)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Inequality(BaoMen.Common.Extension.Base36,BaoMen.Common.Extension.Base36)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Addition(BaoMen.Common.Extension.Base36,BaoMen.Common.Extension.Base36)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Subtraction(BaoMen.Common.Extension.Base36,BaoMen.Common.Extension.Base36)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Increment(BaoMen.Common.Extension.Base36)">
            <summary>
            Operator overload
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Decrement(BaoMen.Common.Extension.Base36)">
            <summary>
            Operator overload
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Multiply(BaoMen.Common.Extension.Base36,BaoMen.Common.Extension.Base36)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Division(BaoMen.Common.Extension.Base36,BaoMen.Common.Extension.Base36)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Modulus(BaoMen.Common.Extension.Base36,BaoMen.Common.Extension.Base36)">
            <summary>
            Operator overload
            </summary>
            <param name="LHS"></param>
            <param name="RHS"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Implicit(BaoMen.Common.Extension.Base36)~System.Int64">
            <summary>
            Converts type Base36 to a base-10 long
            </summary>
            <param name="Value">The Base36 object</param>
            <returns>The base-10 long integer</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Implicit(BaoMen.Common.Extension.Base36)~System.Int32">
            <summary>
            Converts type Base36 to a base-10 integer
            </summary>
            <param name="Value">The Base36 object</param>
            <returns>The base-10 integer</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Implicit(BaoMen.Common.Extension.Base36)~System.Int16">
            <summary>
            Converts type Base36 to a base-10 short
            </summary>
            <param name="Value">The Base36 object</param>
            <returns>The base-10 short</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Implicit(System.Int64)~BaoMen.Common.Extension.Base36">
            <summary>
            Converts a long (base-10) to a Base36 type
            </summary>
            <param name="Value">The long to convert</param>
            <returns>The Base36 object</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Explicit(BaoMen.Common.Extension.Base36)~System.String">
            <summary>
            Converts type Base36 to a string; must be explicit, since
            Base36 > string is dangerous!
            </summary>
            <param name="Value">The Base36 type</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.op_Implicit(System.String)~BaoMen.Common.Extension.Base36">
            <summary>
            Converts a string to a Base36
            </summary>
            <param name="Value">The string (must be a Base36 string)</param>
            <returns>A Base36 type</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.ToString">
            <summary>
            Returns a string representation of the Base36 number
            </summary>
            <returns>A string representation</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.GetHashCode">
            <summary>
            A unique value representing the value of the number
            </summary>
            <returns>The unique number</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.Equals(System.Object)">
            <summary>
            Determines if an object has the same value as the instance
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the values are the same</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.Base36.ToString(System.Int32)">
            <summary>
            Returns a string representation padding the leading edge with
            zeros if necessary to make up the number of characters
            </summary>
            <param name="MinimumDigits">The minimum number of digits that the string must contain</param>
            <returns>The padded string representation</returns>
        </member>
        <member name="T:BaoMen.Common.Extension.DapperExtension">
            <summary>
            Dapper扩展
            </summary>
        </member>
        <member name="M:BaoMen.Common.Extension.DapperExtension.GetIntIdentity(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            获取int类型的标识
            </summary>
            <param name="connection">数据库链接</param>
            <param name="transaction">数据库事务</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.DapperExtension.GetLongIdentity(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            获取long类型的标识
            </summary>
            <param name="connection">数据库链接</param>
            <param name="transaction">数据库事务</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.DapperExtension.CreateCommandDefine(BaoMen.Common.Model.DapperCommand)">
            <summary>
            创建CommandDefinition实例
            </summary>
            <param name="dapperCommand"></param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Extension.DynamicExtention">
            <summary>
            dynamic扩展
            </summary>
        </member>
        <member name="M:BaoMen.Common.Extension.DynamicExtention.IsPropertyExist(System.Object,System.String)">
            <summary>
            属性是否存在
            </summary>
            <param name="data">dynamic数据</param>
            <param name="propertyname">属性名称</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Extension.LinqExtension">
            <summary>
            Linq查询的扩展方法
            </summary>
        </member>
        <member name="M:BaoMen.Common.Extension.LinqExtension.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            用于Linq的去重,扩展方法需要放到静态类中
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source">源</param>
            <param name="keySelector">键选择器</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Extension.ObjectExtension">
            <summary>
            对象帮助
            </summary>
        </member>
        <member name="M:BaoMen.Common.Extension.ObjectExtension.CloneObject(System.Object)">
            <summary>
            克隆(深拷贝)。对象必须是可序列化的类的实例。
            </summary>
            <param name="value">输入值。可以为null</param>
            <returns>新值</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.ObjectExtension.Clone``1(``0)">
            <summary>
            克隆(深拷贝)。对象必须是可序列化的类的实例
            </summary>
            <typeparam name="T">输入值的类型</typeparam>
            <param name="value">输入值。必须是可序列化的。</param>
            <returns>新值</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.ObjectExtension.SerializeXml(System.Object)">
            <summary>
            将对象序列化为xml
            </summary>
            <param name="value">对象实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.ObjectExtension.DeserializeXml``1(System.String)">
            <summary>
            将Xml反序列化为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="xml">xml</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.ObjectExtension.DeserializeXml(System.String,System.Type)">
            <summary>
            将Xml反序列化为对象
            </summary>
            <param name="xml">xml</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.ObjectExtension.Serialize(System.Object)">
            <summary>
            序列化对象。对象必须是可序列化的类。
            </summary>
            <param name="value">要序列化的对象实例。可以为null</param>
            <returns>序列化后的对象。如果输入为null则返回null</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.ObjectExtension.Deserialize(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <param name="serializedObject">序列化后的对象。可以为null</param>
            <returns>反序列化后的对象。如果输入为null则返回null</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.ObjectExtension.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="serializedObject">序列化后的对象</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.ObjectExtension.TryDeserialize(System.Byte[])">
            <summary>
            反序列化。如果出现异常，返回null
            </summary>
            <param name="serializedObject">序列化后的对象</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.ObjectExtension.TryDeserialize``1(System.Byte[])">
            <summary>
            反序列化。如果出现异常，返回null
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="serializedObject">序列化后的对象</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Extension.StringExtension">
            <summary>
            字符串帮助类
            </summary>
        </member>
        <member name="M:BaoMen.Common.Extension.StringExtension.To32MD5(System.String)">
            <summary>
            将字符串转为32位的MD5编码
            </summary>
            <param name="str">输入的字符串</param>
            <returns>32位编码的字符串</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.StringExtension.To32MD5(System.String,System.Text.Encoding)">
            <summary>
            将字符串转为32位的MD5编码
            </summary>
            <param name="str">输入的字符串</param>
            <param name="encoding">字符编码</param>
            <returns>32位编码的字符串</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.StringExtension.ToSHA1(System.String)">
            <summary>
            计算字符串的SHA1值
            </summary>
            <param name="str">输入的字符串</param>
            <returns>字符串的SHA1值</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.StringExtension.ToSHA1(System.String,System.Text.Encoding)">
            <summary>
            计算字符串的SHA1值
            </summary>
            <param name="str">输入的字符串</param>
            <param name="encoding">字符编码</param>
            <returns>字符串的SHA1值</returns>
        </member>
        <member name="M:BaoMen.Common.Extension.StringExtension.EncryptAES(System.String,System.String)">
            <summary>
            AES加密
            </summary>
            <param name="str">输入的字符串</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.StringExtension.DecryptAES(System.String,System.String)">
            <summary>
            AES解密
            </summary>
            <param name="str">输入的字符串</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.StringExtension.TransferCode(System.String,System.String,System.String)">
            <summary>
            将旧编码的字符串转化成新编码的字符串
            </summary>
            <param name="str">字符串</param>
            <param name="oldEncodingName">旧编码名称</param>
            <param name="newEncodingName">新编码名称</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.StringExtension.TransferCode(System.String,System.Int32,System.Int32)">
            <summary>
            将旧编码的字符串转化成新编码的字符串
            </summary>
            <param name="str">字符串</param>
            <param name="oldCodePage">旧编码</param>
            <param name="newCodePage">新编码</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.StringExtension.TransferCode(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            将旧编码的字符串转化成新编码的字符串
            </summary>
            <param name="str">字符串</param>
            <param name="oldEncoding">旧编码</param>
            <param name="newEncoding">新编码</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.StringExtension.TransferCode(System.String,System.Text.Encoding,System.Text.Encoding,System.Boolean)">
            <summary>
            将旧编码的字符串转化成新编码的字符串
            </summary>
            <param name="str">字符串</param>
            <param name="oldEncoding">旧编码</param>
            <param name="newEncoding">新编码</param>
            <param name="transfer">是否需要转换</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.StringExtension.ToCamelCase(System.String)">
            <summary>
            转为Camel命名规范（首字母小写）
            </summary>
            <param name="word">单词</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.StringExtension.ToCamelCase(System.String,System.Char)">
            <summary>
            转为Camel命名规范（首字母小写）
            </summary>
            <param name="str">字符串</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.StringExtension.ToPascalCase(System.String)">
            <summary>
            转为Pascal命名规范（首字母大写）
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Extension.StringExtension.ToPascalCase(System.String,System.Char)">
            <summary>
            转为Pascal命名规范（首字母大写）
            </summary>
            <param name="str">字符串</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Model.DapperCommand">
            <summary>
            Dapper数据库命令
            </summary>
        </member>
        <member name="M:BaoMen.Common.Model.DapperCommand.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.DapperCommand.CommandText">
            <summary>
            The command (sql or a stored-procedure name) to execute
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.DapperCommand.Parameters">
            <summary>
            The parameters associated with the command
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.DapperCommand.Transaction">
            <summary>
            The active transaction for the command
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.DapperCommand.CommandTimeout">
            <summary>
            The effective timeout for the command
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.DapperCommand.CommandType">
            <summary>
            The type of command that the command-text represents
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.DapperCommand.Flags">
            <summary>
            Additional state flags against this command
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.DapperCommand.CancellationToken">
            <summary>
            For asynchronous operations, the cancellation-token
            </summary>
        </member>
        <member name="T:BaoMen.Common.Model.FilterProperty`1">
            <summary>
            数据库过滤类属性类型
            当属性为null时，不作为检索条件
            </summary>
        </member>
        <member name="M:BaoMen.Common.Model.FilterProperty`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:BaoMen.Common.Model.FilterProperty`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="value">值</param>
        </member>
        <member name="P:BaoMen.Common.Model.FilterProperty`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.FilterProperty`1.LogicOperator">
            <summary>
            逻辑操作符
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.FilterProperty`1.CompareOperator">
            <summary>
            比较操作符
            </summary>
        </member>
        <member name="M:BaoMen.Common.Model.FilterProperty`1.op_Implicit(BaoMen.Common.Model.FilterProperty{`0})~`0">
            <summary>
            提供将FilterProperty转换为T的操作
            </summary>
            <param name="value">FilterProperty实例</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Model.FilterProperty`1.op_Implicit(`0)~BaoMen.Common.Model.FilterProperty{`0}">
            <summary>
            提供将T转换为FilterProperty的操作
            </summary>
            <param name="value">T的值</param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Model.FilterProperty`1.ToString">
            <summary>
            重写的ToString方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Model.IHierarchicalData`1">
            <summary>
            分层数据
            </summary>
            <typeparam name="T">标识类型</typeparam>
        </member>
        <member name="P:BaoMen.Common.Model.IHierarchicalData`1.Id">
            <summary>
            获取或设置标识
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.IHierarchicalData`1.ParentId">
            <summary>
            获取或设置父标识
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.IHierarchicalData`1.Name">
            <summary>
            获取或设置名称
            </summary>
        </member>
        <member name="T:BaoMen.Common.Model.QuerySql">
            <summary>
            QuerySql
            </summary>
        </member>
        <member name="M:BaoMen.Common.Model.QuerySql.#ctor">
            <summary>
            Construct new QuerySql instance.
            </summary>
        </member>
        <member name="M:BaoMen.Common.Model.QuerySql.#ctor(System.String)">
            <summary>
            Construct new QuerySql instance.
            </summary>
            <param name="sql">query string.Important:IdFiled must be the first column.</param>
        </member>
        <member name="P:BaoMen.Common.Model.QuerySql.From">
            <summary>
            获取或设置从哪张表取数据
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.QuerySql.Where">
            <summary>
            获取或设置条件
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.QuerySql.Column">
            <summary>
            获取或设置要读取的字段名
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.QuerySql.Order">
            <summary>
            获取或设置排序语句
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.QuerySql.Group">
            <summary>
            获取或设置分组语句
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.QuerySql.Having">
            <summary>
            获取或设置having语句
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.QuerySql.IdField">
            <summary>
            获取或设置生成新页时使用的in()中的字段。
            </summary>
        </member>
        <member name="M:BaoMen.Common.Model.QuerySql.GetDefaultIdField">
            <summary>
            获取默认idfiled
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Model.QuerySql.ToString">
            <summary>
            返回sql语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Model.QuerySql.GetFromPosition(System.String)">
            <summary>
            获取sql语句中from位置
            </summary>
            <param name="sqlString"></param>
            <returns></returns>
        </member>
        <member name="M:BaoMen.Common.Model.QuerySql.GetWherePosition(System.String)">
            <summary>
            获取sql语句中where位置
            </summary>
            <param name="sqlString"></param>
            <returns></returns>
        </member>
        <member name="T:BaoMen.Common.Model.ResponseData">
            <summary>
            返回的数据
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.ResponseData.ErrorNumber">
            <summary>
            错误编号。0为无错误
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.ResponseData.ErrorMessage">
            <summary>
            错误描述
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.ResponseData.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:BaoMen.Common.Model.ResponseData`1">
            <summary>
            返回的数据
            </summary>
        </member>
        <member name="M:BaoMen.Common.Model.ResponseData`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:BaoMen.Common.Model.ResponseData`1.#ctor(BaoMen.Common.Model.ResponseData)">
            <summary>
            构造函数
            </summary>
            <param name="responseData">返回的数据实例</param>
        </member>
        <member name="P:BaoMen.Common.Model.ResponseData`1.Data">
            <summary>
            获取或设置值
            </summary>
        </member>
        <member name="T:BaoMen.Common.Model.TextValue`1">
            <summary>
            文本/值
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.TextValue`1.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:BaoMen.Common.Model.TextValue`1.Value">
            <summary>
            值
            </summary>
        </member>
    </members>
</doc>
